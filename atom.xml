<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ren&#39;s 搞玩日誌</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://feifacunzai.github.io/"/>
  <updated>2020-12-20T18:28:12.202Z</updated>
  <id>https://feifacunzai.github.io/</id>
  
  <author>
    <name>Ren</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Puppeteer &amp; Twitch掛台領取忠誠點數</title>
    <link href="https://feifacunzai.github.io/2020/12/20/Puppeteer-Twitch%E6%8E%9B%E5%8F%B0%E9%A0%98%E5%8F%96%E5%BF%A0%E8%AA%A0%E9%BB%9E%E6%95%B8/"/>
    <id>https://feifacunzai.github.io/2020/12/20/Puppeteer-Twitch%E6%8E%9B%E5%8F%B0%E9%A0%98%E5%8F%96%E5%BF%A0%E8%AA%A0%E9%BB%9E%E6%95%B8/</id>
    <published>2020-12-20T13:59:06.000Z</published>
    <updated>2020-12-20T18:28:12.202Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/puppeteer/puppeteer" target="_blank" rel="noopener">Puppeteer</a>，由 Google 出品的 Node Library，可以用來控制瀏覽器和模擬使用者行為，不管用來寫爬蟲或測試程式都是不可多得的利器；而在這次學習案例中，則是以 Twitch 為研究目標，來開發個模擬使用者看台的輔助程式。</p><a id="more"></a><h2 id="Puppeteer"><a href="#Puppeteer" class="headerlink" title="Puppeteer"></a>Puppeteer</h2><p>學習心得就是簡單好用，尤其是結合 Chrome 的 <a href="https://developers.google.com/web/updates/2017/04/headless-chrome" target="_blank" rel="noopener">Headless</a> 功能，簡直讓我驚為天人。</p><p>那到底 Puppeteer 要做什麼事呢？首先把要模擬的行為先簡單列出來，仔細一看原來也就一項而已。</p><table><thead><tr><th>User</th><th align="center">Puppeteer</th></tr></thead><tbody><tr><td>開啟某個實況主頻道</td><td align="center">開啟某個 Url</td></tr><tr><td>觀看</td><td align="center">❌</td></tr></tbody></table><h2 id="Twitch-watcher"><a href="#Twitch-watcher" class="headerlink" title="Twitch-watcher"></a>Twitch-watcher</h2><p>而這樣的一支程式已經有人寫好了，專案名稱就叫 <a href="https://github.com/D3vl0per/Twitch-watcher" target="_blank" rel="noopener">Twitch-watcher</a>，這個專案讓我學習到很多東西，實在是非常感謝該作者。</p><h2 id="專案目標"><a href="#專案目標" class="headerlink" title="專案目標"></a>專案目標</h2><p>我這邊要做的，就是以現有的 Twitch-watcher 加入自己的需求進行客製化，以下列出這次的目標：</p><ul><li>指令控制</li><li>列出追隨頻道</li><li>觀看多個頻道</li><li>關台偵測</li><li>領取特殊額外獎勵</li><li>計算忠誠點數</li></ul><h2 id="實作-指令控制"><a href="#實作-指令控制" class="headerlink" title="實作-指令控制"></a>實作-指令控制</h2><p>使用 <a href="https://nodejs.org/api/readline.html" target="_blank" rel="noopener">readline</a> 重新設計使用者操作流程，並加入 help(幫助)、list(列出追隨頻道)、watch(開始觀看指定頻道)、state(查詢觀看狀態)、leave(離開指定頻道)、exit(離開程式)。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> readline = <span class="built_in">require</span>(<span class="string">"readline"</span>);</span><br><span class="line"></span><br><span class="line">process.stdin.setEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line"><span class="keyword">const</span> rl = readline.createInterface({</span><br><span class="line">  input: process.stdin,</span><br><span class="line">  output: process.stdout,</span><br><span class="line">  prompt: <span class="string">"&gt; "</span>,</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">rl.on(<span class="string">"line"</span>, <span class="keyword">async</span> (input) =&gt; {</span><br><span class="line">  <span class="keyword">const</span> source = input.trim().split(<span class="string">" "</span>);</span><br><span class="line">  <span class="keyword">const</span> command = source[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">const</span> args = source[<span class="number">1</span>];</span><br><span class="line">  rl.pause();</span><br><span class="line">  <span class="keyword">switch</span> (command) {</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"help"</span>:</span><br><span class="line">      <span class="keyword">await</span> output.help();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">  }</span><br><span class="line">  rl.resume();</span><br><span class="line">  rl.prompt();</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><h2 id="實作-列出追隨頻道"><a href="#實作-列出追隨頻道" class="headerlink" title="實作-列出追隨頻道"></a>實作-列出追隨頻道</h2><p>因為原專案是列出 Valorant 的相關頻道，所以只要修改取得頻道的網址和 Query 就 OK 了。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> streamersUrl =</span><br><span class="line">  process.env.streamersUrl || <span class="string">"https://www.twitch.tv/directory/following/live"</span>;</span><br><span class="line"><span class="keyword">const</span> channelsQuery = <span class="string">'a[data-a-target="preview-card-image-link"]'</span>;</span><br></pre></td></tr></tbody></table></figure><h2 id="實作-觀看多個頻道"><a href="#實作-觀看多個頻道" class="headerlink" title="實作-觀看多個頻道"></a>實作-觀看多個頻道</h2><p>配合前面的 watch 指令重新設計了一個方法(watch)來接收頻道資料，每個觀看任務都有獨立的 Browser 和 Page，初始化完成後開始觀看任務(loopWatch)。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (command) {</span><br><span class="line">  ...</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">case</span> <span class="string">"watch"</span>:</span><br><span class="line">    <span class="keyword">if</span> (args &amp;&amp; streamers[args] != <span class="literal">null</span> &amp;&amp; !streamers[args].isRun) {</span><br><span class="line">      <span class="keyword">await</span> watch(streamers[args]);</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">      <span class="keyword">await</span> output.help();</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  ...</span><br><span class="line">  ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">watch</span>(<span class="params">streamer</span>) </span>{</span><br><span class="line">  <span class="keyword">let</span> browser = <span class="keyword">await</span> spawnBrowser();</span><br><span class="line">  <span class="keyword">let</span> page = <span class="keyword">await</span> spawnPage(browser);</span><br><span class="line">  ...</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">await</span> initialWatchPage(streamer);</span><br><span class="line">  loopWatch(streamer);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="實作-關台偵測"><a href="#實作-關台偵測" class="headerlink" title="實作-關台偵測"></a>實作-關台偵測</h2><p>每小時重整一次頁面，當偵測到頻道離線時，停止任務並關閉瀏覽器(killStream)。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">loopWatch</span>(<span class="params">streamer</span>) </span>{</span><br><span class="line">  <span class="keyword">while</span> (streamer.isRun) {</span><br><span class="line">    <span class="keyword">if</span> (dayjs(streamer.reload).isBefore(dayjs())) {</span><br><span class="line">      <span class="keyword">await</span> streamer.page.reload({ <span class="attr">waitUntil</span>: [<span class="string">"networkidle0"</span>] });</span><br><span class="line">      ...</span><br><span class="line">      ...</span><br><span class="line">      <span class="keyword">let</span> channelOfflineDiv = <span class="keyword">await</span> queryOnWebsite(page, streamOfflineQuery);</span><br><span class="line">      <span class="keyword">if</span> (channelOfflineDiv.length &gt; <span class="number">0</span>) {</span><br><span class="line">        <span class="keyword">await</span> killStream(streamer);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">await</span> claimPoint(streamer);</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="實作-領取特殊額外獎勵"><a href="#實作-領取特殊額外獎勵" class="headerlink" title="實作-領取特殊額外獎勵"></a>實作-領取特殊額外獎勵</h2><p>偵測領取按鈕，每秒執行一次，直到任務結束；每成功領取一次則計數器(claim)++。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">claimPoint</span>(<span class="params">streamer</span>) </span>{</span><br><span class="line">  <span class="keyword">let</span> reload = dayjs(streamer.reload);</span><br><span class="line">  <span class="keyword">while</span> (!reload.isBefore(dayjs())) {</span><br><span class="line">    <span class="keyword">if</span> (streamer.isRun === <span class="literal">false</span>) <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">let</span> claimBtn = <span class="keyword">await</span> queryOnWebsite(streamer.page, claimPointQuery);</span><br><span class="line">    <span class="keyword">if</span> (claimBtn.length &gt; <span class="number">0</span>) {</span><br><span class="line">      <span class="keyword">await</span> <span class="built_in">eval</span>.eval(</span><br><span class="line">        streamer.page,</span><br><span class="line">        <span class="string">`() =&gt; document.querySelector('<span class="subst">${claimPointQuery}</span>').click()`</span></span><br><span class="line">      );</span><br><span class="line">      streamer.claim++;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">await</span> streamer.page.waitFor(<span class="number">1000</span>);</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="實作-計算忠誠點數"><a href="#實作-計算忠誠點數" class="headerlink" title="實作-計算忠誠點數"></a>實作-計算忠誠點數</h2><p>任務開始時紀錄初始數值，每次查詢(state)時計算相差多少，簡直不要太簡單。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">state</span>(<span class="params">token, streamer</span>) </span>{</span><br><span class="line">  ...</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">let</span> point = <span class="keyword">await</span> gqlapi.channelPointsContext(token, streamer.login);</span><br><span class="line">  <span class="keyword">let</span> balance = point.data.community.channel.self.communityPoints.balance;</span><br><span class="line">  <span class="built_in">console</span>.log(</span><br><span class="line">    <span class="string">`✨ [<span class="subst">${streamer.login}</span>] Point: <span class="subst">${streamer.point}</span> ~ <span class="subst">${balance}</span> (claim <span class="subst">${streamer.claim}</span> times)`</span></span><br><span class="line">  );</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p>這次額外學習到的新工具 <a href="https://asciinema.org/" target="_blank" rel="noopener">asciinema</a>，可以非常輕量的錄製 terminal 執行過程並發布成影片，但在 Windows 上只能用 <a href="https://github.com/ibigbug/PowerSession" target="_blank" rel="noopener">PowerSession</a> 就是了(我自己測試有亂碼問題)。<br><a href="https://asciinema.org/a/Lzc1IUAVVCZiBv2cOjZ0tJQT9" target="_blank" rel="noopener"><img src="https://asciinema.org/a/Lzc1IUAVVCZiBv2cOjZ0tJQT9.svg" alt="asciicast"></a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/puppeteer/puppeteer&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Puppeteer&lt;/a&gt;，由 Google 出品的 Node Library，可以用來控制瀏覽器和模擬使用者行為，不管用來寫爬蟲或測試程式都是不可多得的利器；而在這次學習案例中，則是以 Twitch 為研究目標，來開發個模擬使用者看台的輔助程式。&lt;/p&gt;
    
    </summary>
    
    
      <category term="新奇玩具" scheme="https://feifacunzai.github.io/categories/%E6%96%B0%E5%A5%87%E7%8E%A9%E5%85%B7/"/>
    
    
      <category term="Node.js" scheme="https://feifacunzai.github.io/tags/Node-js/"/>
    
      <category term="Puppeteer" scheme="https://feifacunzai.github.io/tags/Puppeteer/"/>
    
      <category term="Twitch" scheme="https://feifacunzai.github.io/tags/Twitch/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 紀錄更新過程</title>
    <link href="https://feifacunzai.github.io/2020/06/29/Hexo-%E7%B4%80%E9%8C%84%E6%9B%B4%E6%96%B0%E9%81%8E%E7%A8%8B/"/>
    <id>https://feifacunzai.github.io/2020/06/29/Hexo-%E7%B4%80%E9%8C%84%E6%9B%B4%E6%96%B0%E9%81%8E%E7%A8%8B/</id>
    <published>2020-06-29T08:16:53.000Z</published>
    <updated>2020-12-19T13:51:20.532Z</updated>
    
    <content type="html"><![CDATA[<p>這個網站建立快三年了，這段期間完全沒動過框架。<br>今天心血來潮，來更新一下這個網站所使用的 Hexo 和 Next。</p><a id="more"></a><h2 id="更新-Hexo-CLI"><a href="#更新-Hexo-CLI" class="headerlink" title="更新 Hexo-CLI"></a>更新 Hexo-CLI</h2><p>版本為 1.1.0 → 3.1.0，過程一切正常。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-cli -g</span><br></pre></td></tr></tbody></table></figure><h2 id="更新-Hexo"><a href="#更新-Hexo" class="headerlink" title="更新 Hexo"></a>更新 Hexo</h2><p>Hexo 與專案相依的 Lib 可以直接透過<code>npm-upgrade</code>來找出最新版本，安裝執行後它會更新<code>package.json</code>，再使用<code>npm update</code>把它們全部升級。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g npm-upgrade</span><br><span class="line">npm-upgrade</span><br><span class="line">npm update</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">gulp-htmlclean              ^2.7.15   →   ^2.7.22</span><br><span class="line">gulp-htmlmin                 ^3.0.0   →    ^5.0.1</span><br><span class="line">gulp-imagemin                ^3.4.0   →    ^7.1.0</span><br><span class="line">gulp-uglify                  ^3.0.0   →    ^3.0.2</span><br><span class="line">hexo                         ^3.8.0   →    ^4.2.1</span><br><span class="line">hexo-algolia                 ^1.2.3   →    ^1.3.1</span><br><span class="line">hexo-deployer-git            ^0.3.1   →    ^2.1.0</span><br><span class="line">hexo-filter-github-emojis    ^1.4.3   →    ^2.1.0</span><br><span class="line">hexo-generator-archive       ^0.1.4   →    ^1.0.0</span><br><span class="line">hexo-generator-category      ^0.1.3   →    ^1.0.0</span><br><span class="line">hexo-generator-feed          ^1.2.2   →    ^2.2.0</span><br><span class="line">hexo-generator-index         ^0.2.0   →    ^1.0.0</span><br><span class="line">hexo-generator-sitemap       ^1.2.0   →    ^2.0.0</span><br><span class="line">hexo-generator-tag           ^0.2.0   →    ^1.0.0</span><br><span class="line">hexo-renderer-ejs            ^0.3.0   →    ^1.0.0</span><br><span class="line">hexo-renderer-marked         ^0.3.0   →    ^3.0.0</span><br><span class="line">hexo-renderer-stylus         ^0.3.1   →    ^1.1.0</span><br><span class="line">hexo-server                  ^0.2.0   →    ^1.0.0</span><br></pre></td></tr></tbody></table></figure><p>更新完後實際執行，看一下效能比較，升級果然有差，速度已經快了不少。</p><p>Before<br><img src="performance_before.jpg"></p><p>After<br><img src="performance_after.jpg"></p><h2 id="更新-Next"><a href="#更新-Next" class="headerlink" title="更新 Next"></a>更新 Next</h2><p>官方有提供<a href="https://github.com/theme-next/hexo-theme-next/blob/master/docs/UPDATE-FROM-5.1.X.md" target="_blank" rel="noopener">升級指南</a>，先將最新版本 Clone 下來。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/theme-next/hexo-theme-next themes/next-reloaded</span><br></pre></td></tr></tbody></table></figure><p>再將 Hexo 設定檔<code>_config.yml</code>內的 theme 改為<code>next-reloaded</code>。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: https://hexo.io/plugins/</span><br><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line">theme: next-reloaded</span><br></pre></td></tr></tbody></table></figure><p>最後，將新舊版的 Next 設定檔進行 Diff 比較，參考舊的進行配置；下圖可以看到，兩個檔案的差異看似很多，其實只是多了一些細節設定，整體來說大同小異。<br><img src="diff.jpg"></p><h2 id="更新結語"><a href="#更新結語" class="headerlink" title="更新結語"></a>更新結語</h2><p>在這次的升級過程中，最大的意外就是沒發生任何意外，明明是間隔兩年、跨越多個版本的升級，真是不得不佩服這些專案的維護團隊。</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://whjkm.github.io/2018/07/17/Hexo%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7%E5%92%8CNext%E4%B8%BB%E9%A2%98%E5%8D%87%E7%BA%A7%E4%B9%8B%E5%9D%91/" target="_blank" rel="noopener">Hexo版本升级和Next主题升级之坑</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;這個網站建立快三年了，這段期間完全沒動過框架。&lt;br&gt;今天心血來潮，來更新一下這個網站所使用的 Hexo 和 Next。&lt;/p&gt;
    
    </summary>
    
    
      <category term="簡單紀錄" scheme="https://feifacunzai.github.io/categories/%E7%B0%A1%E5%96%AE%E7%B4%80%E9%8C%84/"/>
    
    
      <category term="Hexo" scheme="https://feifacunzai.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Ionic 整理目前遇到的無解問題</title>
    <link href="https://feifacunzai.github.io/2020/05/19/Ionic-%E6%95%B4%E7%90%86%E7%9B%AE%E5%89%8D%E9%81%87%E5%88%B0%E7%9A%84%E7%84%A1%E8%A7%A3%E5%95%8F%E9%A1%8C/"/>
    <id>https://feifacunzai.github.io/2020/05/19/Ionic-%E6%95%B4%E7%90%86%E7%9B%AE%E5%89%8D%E9%81%87%E5%88%B0%E7%9A%84%E7%84%A1%E8%A7%A3%E5%95%8F%E9%A1%8C/</id>
    <published>2020-05-18T17:02:11.000Z</published>
    <updated>2020-12-19T13:51:20.555Z</updated>
    
    <content type="html"><![CDATA[<p>紀錄一下最近寫 APP 遇到的問題，這些問題只有在實機上才會發生，而且現階段我還無解。頭痛。</p><a id="more"></a><h2 id="Ion-img-載入多次圖片導致程式崩潰"><a href="#Ion-img-載入多次圖片導致程式崩潰" class="headerlink" title="Ion-img 載入多次圖片導致程式崩潰"></a>Ion-img 載入多次圖片導致程式崩潰</h2><p>我有個相簿功能，進入畫面時會從 Storage 中取出照片的檔案路徑列表(file://)，並用 Ion-img 延遲載入顯示，但重複多次這個流程可能會造成 Ionic 崩潰重整頁面；下圖在第四次進入相簿時崩潰。<br><img src="ion-img.gif"></p><h2 id="Ion-img-搭配-Canvas-不正常閃爍"><a href="#Ion-img-搭配-Canvas-不正常閃爍" class="headerlink" title="Ion-img 搭配 Canvas 不正常閃爍"></a>Ion-img 搭配 Canvas 不正常閃爍</h2><p>同樣是相簿功能，如果在網頁上想做圖片的拖曳、雙擊/雙點放大縮小…等特效，使用 Canvas 可能是一種選擇，但和 Ion-img 一起使用時卻會發生 Canvas 不正常閃爍的問題；下圖在放大的過程中閃爍。<br><img src="canvas.gif"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;紀錄一下最近寫 APP 遇到的問題，這些問題只有在實機上才會發生，而且現階段我還無解。頭痛。&lt;/p&gt;
    
    </summary>
    
    
      <category term="經驗分享" scheme="https://feifacunzai.github.io/categories/%E7%B6%93%E9%A9%97%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="Ionic" scheme="https://feifacunzai.github.io/tags/Ionic/"/>
    
      <category term="App" scheme="https://feifacunzai.github.io/tags/App/"/>
    
  </entry>
  
  <entry>
    <title>Ionic Infinite Calendar</title>
    <link href="https://feifacunzai.github.io/2020/02/20/Infinite-Calendar/"/>
    <id>https://feifacunzai.github.io/2020/02/20/Infinite-Calendar/</id>
    <published>2020-02-20T10:46:22.000Z</published>
    <updated>2020-12-19T13:51:20.539Z</updated>
    
    <content type="html"><![CDATA[<p>最近有個 Ionic 專案需要把按鍵換頁式的日曆改成垂直滾動式，在這紀錄一下修改過程。</p><a id="more"></a><h2 id="元件規劃"><a href="#元件規劃" class="headerlink" title="元件規劃"></a>元件規劃</h2><p>原本的 Calendar Componet 長成下圖的樣子，預設顯示目前月份，可以點擊按鈕，切換上、下個月的視圖。<br><img src="calendar.jpg"></p><p>計畫是把該功能拆分成兩個 Component，最後再組合起來，功能分別如下</p><ul><li>month-view：顯示某月份日曆</li><li>scroll-calendar：控制卷軸與動態顯示 month-view</li></ul><p>操作情境為 scroll-calendar 顯示目前，與近幾個月的日曆，當卷軸往上或往下時，自動長出後續的 month-view；下圖用 IOS 的日曆來解釋。<br><img src="template.jpg"></p><p>展示用的專案架構。<br><img src="project.jpg"></p><h2 id="實作開始"><a href="#實作開始" class="headerlink" title="實作開始"></a>實作開始</h2><h3 id="步驟-一-month-view-顯示某月份日期"><a href="#步驟-一-month-view-顯示某月份日期" class="headerlink" title="步驟(一) month-view 顯示某月份日期"></a>步驟(一) month-view 顯示某月份日期</h3><p>將原本的 calendar 改成 month-view，控制顯示月份的<code>month</code>參數加上<code>@Input</code>裝飾器，使其可以接收到 scroll-calendar 傳入的月份。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">MonthViewComponent</span> <span class="title">implements</span> <span class="title">OnInit</span> </span>{</span><br><span class="line">  <span class="comment">//略</span></span><br><span class="line"></span><br><span class="line">  @Input(<span class="string">"month"</span>) month: moment.Moment = moment();</span><br><span class="line"></span><br><span class="line">  <span class="comment">//略</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="步驟-二-scroll-calendar-顯示某區間月份"><a href="#步驟-二-scroll-calendar-顯示某區間月份" class="headerlink" title="步驟(二) scroll-calendar 顯示某區間月份"></a>步驟(二) scroll-calendar 顯示某區間月份</h3><p>為了顯示目前月份與前後 n 個月，在這裡定義目前為<code>current</code>，n 為<code>buffer</code>，組出這個區間的資料後，用迴圈顯示 month-view。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">ScrollCalendarPage</span> <span class="title">implements</span> <span class="title">OnInit</span> </span>{</span><br><span class="line">  <span class="keyword">constructor</span>() {}</span><br><span class="line"></span><br><span class="line">  current: moment.Moment = moment();</span><br><span class="line">  buffer = <span class="number">4</span>;</span><br><span class="line">  months: <span class="built_in">Array</span>&lt;moment.Moment&gt; = [];</span><br><span class="line"></span><br><span class="line">  ngOnInit() {</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = -<span class="keyword">this</span>.buffer; i &lt;= <span class="keyword">this</span>.buffer; i++) {</span><br><span class="line">      <span class="keyword">this</span>.months.push(<span class="keyword">this</span>.current.clone().add(i, <span class="string">"months"</span>));</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ion-header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ion-toolbar</span> <span class="attr">color</span>=<span class="string">"primary"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ion-title</span>&gt;</span>scroll-calendar<span class="tag">&lt;/<span class="name">ion-title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ion-toolbar</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ion-header</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ion-content</span> #<span class="attr">content</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">app-month-view</span> *<span class="attr">ngFor</span>=<span class="string">"let month of months"</span> [<span class="attr">month</span>]=<span class="string">"month"</span>&gt;</span><span class="tag">&lt;/<span class="name">app-month-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ion-content</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>這時應該要能正確顯示正負四個月的 month-view。<br><img src="step2-1.jpg"></p><h3 id="步驟-三-scroll-calendar-設定卷軸初始位置"><a href="#步驟-三-scroll-calendar-設定卷軸初始位置" class="headerlink" title="步驟(三) scroll-calendar 設定卷軸初始位置"></a>步驟(三) scroll-calendar 設定卷軸初始位置</h3><p>可以注意到一開始的卷軸會在最上方，而不是當前月份的位置(二月)，若要做到比較好的效果，可以在迴圈時添加 month-view 元件的<code>id</code>，並配合 content 的 scrollToPoint，將卷軸移至指定 month-view。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ion-content</span> #<span class="attr">content</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">app-month-view</span></span></span><br><span class="line"><span class="tag">    *<span class="attr">ngFor</span>=<span class="string">"let month of months; let index = index;"</span></span></span><br><span class="line"><span class="tag">    [<span class="attr">month</span>]=<span class="string">"month"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">id</span>=<span class="string">"monthView_{{index}}"</span></span></span><br><span class="line"><span class="tag">  &gt;</span><span class="tag">&lt;/<span class="name">app-month-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ion-content</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">ScrollCalendarPage</span> <span class="title">implements</span> <span class="title">OnInit</span> </span>{</span><br><span class="line">  <span class="comment">//略</span></span><br><span class="line"></span><br><span class="line">  @ViewChild(<span class="string">"content"</span>, { <span class="attr">static</span>: <span class="literal">true</span> }) contentElement: IonContent;</span><br><span class="line"></span><br><span class="line">  ionViewWillEnter() {</span><br><span class="line">    <span class="keyword">let</span> currentMonthView = <span class="built_in">document</span>.getElementById(<span class="string">`monthView_<span class="subst">${<span class="keyword">this</span>.buffer}</span>`</span>);</span><br><span class="line">    <span class="keyword">this</span>.contentElement.scrollToPoint(<span class="number">0</span>, currentMonthView.offsetTop);</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="步驟-四-scroll-calendar-無限滾動卷軸"><a href="#步驟-四-scroll-calendar-無限滾動卷軸" class="headerlink" title="步驟(四) scroll-calendar 無限滾動卷軸"></a>步驟(四) scroll-calendar 無限滾動卷軸</h3><p>要做到無限滾動卷軸也很簡單，對迴圈的資料來源<code>months</code>做點變動就行了；這邊監聽卷軸事件，當卷軸往下滾時，若 scrollTop 高於目前月份(month-view)的<code>offsetTop</code>，則對 months 插入最後一筆資料，同時，為了避免頁面內容過於肥大，也刪除第一筆資料；卷軸往上也做相對應的處理。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ion-content</span></span></span><br><span class="line"><span class="tag">  #<span class="attr">content</span></span></span><br><span class="line"><span class="tag">  <span class="attr">scrollEvents</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">  (<span class="attr">ionScroll</span>)=<span class="string">"onScroll($event)"</span></span></span><br><span class="line"><span class="tag">  (<span class="attr">ionScrollEnd</span>)=<span class="string">"onScroll($event)"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 略 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ion-content</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">ScrollCalendarPage</span> <span class="title">implements</span> <span class="title">OnInit</span> </span>{</span><br><span class="line">  <span class="comment">//略</span></span><br><span class="line"></span><br><span class="line">  onScroll = <span class="function">(<span class="params">event: CustomEvent</span>) =&gt;</span> {</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      event.detail.scrollTop &lt;</span><br><span class="line">      <span class="built_in">document</span>.getElementById(<span class="string">`monthView_<span class="subst">${<span class="keyword">this</span>.buffer}</span>`</span>).offsetTop</span><br><span class="line">    ) {</span><br><span class="line">      <span class="keyword">this</span>.current.subtract(<span class="number">1</span>, <span class="string">"months"</span>);</span><br><span class="line">      <span class="keyword">this</span>.months.unshift(<span class="keyword">this</span>.current.clone().subtract(<span class="keyword">this</span>.buffer, <span class="string">"months"</span>));</span><br><span class="line">      <span class="keyword">this</span>.months.pop();</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      event.detail.scrollTop &gt;</span><br><span class="line">      <span class="built_in">document</span>.getElementById(<span class="string">`monthView_<span class="subst">${<span class="keyword">this</span>.buffer + <span class="number">1</span>}</span>`</span>).offsetTop</span><br><span class="line">    ) {</span><br><span class="line">      <span class="keyword">this</span>.current.add(<span class="number">1</span>, <span class="string">"months"</span>);</span><br><span class="line">      <span class="keyword">this</span>.months.splice(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">this</span>.months.push(<span class="keyword">this</span>.current.clone().add(<span class="keyword">this</span>.buffer, <span class="string">"months"</span>));</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">  };</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p>可以看到這個頁面永遠只會顯示<code>buffer * 2 + 1</code>個 month-view，一個簡單的垂直滾動日曆就這樣完成了。<br><img src="demo.gif"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近有個 Ionic 專案需要把按鍵換頁式的日曆改成垂直滾動式，在這紀錄一下修改過程。&lt;/p&gt;
    
    </summary>
    
    
      <category term="網頁設計" scheme="https://feifacunzai.github.io/categories/%E7%B6%B2%E9%A0%81%E8%A8%AD%E8%A8%88/"/>
    
    
      <category term="Angular" scheme="https://feifacunzai.github.io/tags/Angular/"/>
    
      <category term="Ionic" scheme="https://feifacunzai.github.io/tags/Ionic/"/>
    
  </entry>
  
  <entry>
    <title>用React重寫Elmah畫面</title>
    <link href="https://feifacunzai.github.io/2018/10/23/%E7%94%A8React%E9%87%8D%E5%AF%ABElmah%E7%95%AB%E9%9D%A2/"/>
    <id>https://feifacunzai.github.io/2018/10/23/%E7%94%A8React%E9%87%8D%E5%AF%ABElmah%E7%95%AB%E9%9D%A2/</id>
    <published>2018-10-23T03:29:05.000Z</published>
    <updated>2020-12-19T13:51:20.872Z</updated>
    
    <content type="html"><![CDATA[<p>我長期以來一直習慣用Elmah來紀錄錯誤日誌(但沒有用elmah.io)，而它本身雖然有提供檢視頁面，但功能卻十分基本，甚至連搜索功能都沒有，既然如此，今天就來自己寫一個吧。</p><a id="more"></a><h2 id="學習目標"><a href="#學習目標" class="headerlink" title="學習目標"></a>學習目標</h2><ul><li>React : 一直沒有時間學，終於找到這次的機會了，就結合.Net Core的React專案一起來研究吧</li><li>Material-UI : 畫面的部份當然也要找個React的知名UI Component來減少設計時間</li><li>簡單的搜尋功能 : 我想要為Elmah加入的功能</li></ul><h2 id="架構"><a href="#架構" class="headerlink" title="架構"></a>架構</h2><p>整個環境大致如下圖。<br><img src="structure.jpg"></p><p>假設有多個站台，發生錯誤時將資訊記錄到DB，而要重作畫面的話就必須重寫存取這些資料的邏輯以及畫面，也就是圖片右半部的WebApi與React View，而這部分我們可以直接使用Vsiaul Studio提供的.Net Core React Project來完成。<br><img src="create_project.jpg"></p><h2 id="讀取錯誤日誌DB"><a href="#讀取錯誤日誌DB" class="headerlink" title="讀取錯誤日誌DB"></a>讀取錯誤日誌DB</h2><p>這裡用EntityFramework來做到簡易的串接DB，跟上面架構圖比較不同的是，因為我自己維護的錯誤日誌散落在不同架構的DB內(SqlServer、Postgres)，所以這裡多了一層Factory來幫助我建立不同DB的Context。</p><figure class="highlight cs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public class ElmahDbContextFactory : IDesignTimeDbContextFactory&lt;ElmahDbContext&gt;</span><br><span class="line">{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ElmahDbContext <span class="title">CreateDbContext</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line">        <span class="keyword">var</span> dataSource = args[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">var</span> catalog = args[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">var</span> userId = args[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">var</span> password = args[<span class="number">3</span>];</span><br><span class="line">        <span class="keyword">var</span> provider = args[<span class="number">4</span>];</span><br><span class="line">        <span class="keyword">var</span> optionsBuilder = <span class="keyword">new</span> DbContextOptionsBuilder&lt;ElmahDbContext&gt;();</span><br><span class="line">        <span class="keyword">if</span> (DatabaseProviderTypes.SqlServer.ToString() == provider)</span><br><span class="line">        {</span><br><span class="line">            optionsBuilder.UseSqlServer(<span class="string">$"Data Source=<span class="subst">{dataSource}</span>;Initial Catalog=<span class="subst">{catalog}</span>;User ID=<span class="subst">{userId}</span>;Password=<span class="subst">{password}</span>;multipleactiveresultsets=True;"</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (DatabaseProviderTypes.PostgresQL.ToString() == provider)</span><br><span class="line">        {</span><br><span class="line">            optionsBuilder.UseNpgsql(<span class="string">$"Server=<span class="subst">{dataSource}</span>;Database=<span class="subst">{catalog}</span>;User Id=<span class="subst">{userId}</span>;Password=<span class="subst">{password}</span>;"</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ElmahDbContext(optionsBuilder.Options);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>接下來實作查詢錯誤日誌列表的Api，這裡可以用剛剛的Factory產生Context讀取錯誤日誌，除了能搜尋ErrorMessage之外，我還想要有分頁功能，所以Model中加入了一些必要參數。</p><figure class="highlight cs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ReceiveGetLogsModel</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> EntityId { <span class="keyword">get</span>; <span class="keyword">set</span>; }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> Limit { <span class="keyword">get</span>; <span class="keyword">set</span>; }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> CurrentPage { <span class="keyword">get</span>; <span class="keyword">set</span>; }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> SearchMessage { <span class="keyword">get</span>; <span class="keyword">set</span>; }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight cs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ResponseGetLogsModel</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">public</span> List&lt;ResponseGetLogEntity&gt; Datas { <span class="keyword">get</span>; <span class="keyword">set</span>; }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> Count { <span class="keyword">get</span>; <span class="keyword">set</span>; }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight cs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">HttpPost(<span class="meta-string">"[action]"</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseGetLogsModel <span class="title">GetLogs</span>(<span class="params">[FromBody]ReceiveGetLogsModel model</span>)</span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">var</span> entity = Db.Elmahs.FirstOrDefault(s =&gt; s.Id == model.EntityId);</span><br><span class="line">    <span class="keyword">var</span> factory = <span class="keyword">new</span> ElmahDbContextFactory();</span><br><span class="line">    <span class="keyword">var</span> elmah = factory.CreateDbContext(<span class="keyword">new</span> <span class="keyword">string</span>[] {</span><br><span class="line">        entity.DataSource,</span><br><span class="line">        entity.CataLog,</span><br><span class="line">        entity.UserId,</span><br><span class="line">        entity.Password,</span><br><span class="line">        entity.ProviderType.ToString()</span><br><span class="line">    });</span><br><span class="line">    <span class="keyword">var</span> query = elmah.Errors.AsQueryable();</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">string</span>.IsNullOrEmpty(model.SearchMessage))</span><br><span class="line">    {</span><br><span class="line">        query = query.Where(s =&gt; s.Message.Contains(model.SearchMessage));</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">var</span> count = query.Count();</span><br><span class="line">    <span class="keyword">var</span> pageDatas = query.Skip((model.CurrentPage - <span class="number">1</span>) * model.Limit)</span><br><span class="line">        .Take(model.Limit)</span><br><span class="line">        .Select(s =&gt; <span class="keyword">new</span> ResponseGetLogEntity()</span><br><span class="line">        {</span><br><span class="line">            ErrorId = s.ErrorId,</span><br><span class="line">            Application = s.Application,</span><br><span class="line">            Host = s.Host,</span><br><span class="line">            Message = s.Message,</span><br><span class="line">            Sequence = s.Sequence,</span><br><span class="line">            Source = s.Source,</span><br><span class="line">            StatusCode = s.StatusCode,</span><br><span class="line">            TimeUtc = s.TimeUtc,</span><br><span class="line">            Type = s.Type,</span><br><span class="line">            User = s.User</span><br><span class="line">        })</span><br><span class="line">        .ToList();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ResponseGetLogsModel()</span><br><span class="line">    {</span><br><span class="line">        Datas = pageDatas,</span><br><span class="line">        Count = count</span><br><span class="line">    };</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>這樣就簡單的完成該功能了，實際用Postman測試一下看是否運作正常。<br><img src="api_getlist.jpg"></p><h2 id="設計畫面"><a href="#設計畫面" class="headerlink" title="設計畫面"></a>設計畫面</h2><p>Material-UI官方推薦了一些不錯的<a href="https://material-ui.com/premium-themes/" target="_blank" rel="noopener">Theme</a>，這裡也是直接選擇免費的<a href="https://www.creative-tim.com/product/material-dashboard-react?partner=104080" target="_blank" rel="noopener">Material Dashboard</a>，下載完後把相關東西放進我們的.Net Core專案的<code>ClientApp</code>目錄下，應該就可以正常執行了。<br><img src="clientapp.jpg"></p><p>把專案站台啟動起來，應該可以看到Preview中的漂亮Dashboard，React專案中也提供了許多現成的View來教開發者如何使用它們提供的UI Component，稍微看一下後就可以開始修改和去除我們不需要的東西，大致結果如下圖。<br><img src="dashboard.jpg"></p><h2 id="串接資料"><a href="#串接資料" class="headerlink" title="串接資料"></a>串接資料</h2><p>前端的大致框架搞定後，接下來要把資料接回來並顯示在畫面上，這裡可以順道學習一下Redux，建立Store來處理這件事情。</p><p>state</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> requestGetLogs = <span class="string">'REQUEST_GET_LOGS'</span>;</span><br><span class="line"><span class="keyword">const</span> receiveGetLogs = <span class="string">'RECEIVE_GET_LOGS'</span>;</span><br><span class="line"><span class="keyword">const</span> initialState = { </span><br><span class="line">  logs: {</span><br><span class="line">    count: <span class="number">0</span>,</span><br><span class="line">    currentPage: <span class="number">1</span>,</span><br><span class="line">    searchMessage: <span class="string">''</span>,</span><br><span class="line">    limit: <span class="number">10</span>,</span><br><span class="line">    data: []</span><br><span class="line">  },</span><br><span class="line">  isLoading: <span class="literal">false</span> </span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>action</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> actionCreators = {</span><br><span class="line">  requestGetLogs: <span class="function">(<span class="params">currentPage = <span class="number">1</span>, limit = <span class="number">10</span>, searchMessage = <span class="string">''</span></span>) =&gt;</span> <span class="keyword">async</span> (dispatch, getState) =&gt; {</span><br><span class="line">    dispatch({ <span class="attr">type</span>: requestGetLogs });</span><br><span class="line">    <span class="keyword">const</span> url = <span class="string">'/api/Elmah/GetLogs'</span>;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> fetch(url, {</span><br><span class="line">      method: <span class="string">'POST'</span>,</span><br><span class="line">      body: <span class="built_in">JSON</span>.stringify({</span><br><span class="line">        EntityId: getState().elmah.activeEntityId,</span><br><span class="line">        CurrentPage: currentPage,</span><br><span class="line">        Limit: limit,</span><br><span class="line">        SearchMessage: searchMessage</span><br><span class="line">      }),</span><br><span class="line">      headers: {</span><br><span class="line">        <span class="string">'content-type'</span>: <span class="string">'application/json'</span></span><br><span class="line">      }</span><br><span class="line">    });</span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> response.json();</span><br><span class="line">    dispatch({ </span><br><span class="line">      type: receiveGetLogs, </span><br><span class="line">      datas: data.datas, </span><br><span class="line">      count: data.count, </span><br><span class="line">      currentPage: currentPage,</span><br><span class="line">      searchMessage: searchMessage,</span><br><span class="line">      limit: limit });</span><br><span class="line">  }</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>reducer</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> reducer = <span class="function">(<span class="params">state, action</span>) =&gt;</span> {</span><br><span class="line">  state = state || initialState;</span><br><span class="line">  <span class="keyword">if</span> (action.type === requestGetLogs) {</span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">      ...state,</span><br><span class="line">      logs: {</span><br><span class="line">        data: []</span><br><span class="line">      },</span><br><span class="line">      isLoading: <span class="literal">true</span></span><br><span class="line">    };</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">if</span> (action.type === receiveGetLogs) {</span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">      ...state,</span><br><span class="line">      logs: {</span><br><span class="line">        data: action.datas,</span><br><span class="line">        currentPage: action.currentPage,</span><br><span class="line">        limit: action.limit,</span><br><span class="line">        count: action.count,</span><br><span class="line">        searchMessage: action.searchMessage</span><br><span class="line">      },</span><br><span class="line">      isLoading: <span class="literal">false</span></span><br><span class="line">    };</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> state;</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>再將State和Dispatche綁到我們自己寫的View Component上。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Logs</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>{</span><br><span class="line">  componentWillMount() {</span><br><span class="line">    <span class="keyword">let</span> page = <span class="keyword">this</span>.props.match.params.page || <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> limit = <span class="keyword">this</span>.props.match.params.limit || <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">let</span> message = <span class="keyword">this</span>.props.match.params.message || <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">this</span></span><br><span class="line">      .props</span><br><span class="line">      .requestGetLogs(<span class="built_in">parseInt</span>(page), <span class="built_in">parseInt</span>(limit), message);</span><br><span class="line">  }</span><br><span class="line">  <span class="comment">//此處過長，在文章中略過</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">const</span> mapStateToProps = <span class="function"><span class="params">state</span> =&gt;</span> ({<span class="attr">elmah</span>: state.elmah});</span><br><span class="line"><span class="keyword">const</span> mapDispatchToProps = <span class="function"><span class="params">dispatch</span> =&gt;</span> bindActionCreators(actionCreators, dispatch);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(mapStateToProps, mapDispatchToProps)(Logs);</span><br></pre></td></tr></tbody></table></figure><p>資料就可以正常顯示了。<br><img src="view_logs.jpg"></p><p>詳情頁我們也可以依樣畫葫蘆，這樣近似於原本Elmah的功能就完成了。<br><img src="view_logdetail.jpg"></p><p>至於搜尋功能，包含API和畫面都是我們自己做的，未來擴充也相當方便。<br><img src="view_logsearch.jpg"></p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>所有學習目標應該都完成了，目前Angular、Vue、React通通都寫過，個人覺得React相較於前兩者真的是有比較難一點，而這個專案未來我也會抽時間繼續開發，希望有機會能幫到同為使用Elmah的大家。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我長期以來一直習慣用Elmah來紀錄錯誤日誌(但沒有用elmah.io)，而它本身雖然有提供檢視頁面，但功能卻十分基本，甚至連搜索功能都沒有，既然如此，今天就來自己寫一個吧。&lt;/p&gt;
    
    </summary>
    
    
      <category term="學習心得" scheme="https://feifacunzai.github.io/categories/%E5%AD%B8%E7%BF%92%E5%BF%83%E5%BE%97/"/>
    
    
      <category term="C#" scheme="https://feifacunzai.github.io/tags/C/"/>
    
      <category term=".NET" scheme="https://feifacunzai.github.io/tags/NET/"/>
    
      <category term=".NetCore" scheme="https://feifacunzai.github.io/tags/NetCore/"/>
    
      <category term="React" scheme="https://feifacunzai.github.io/tags/React/"/>
    
      <category term="Elmah" scheme="https://feifacunzai.github.io/tags/Elmah/"/>
    
  </entry>
  
  <entry>
    <title>LINE LIFF 你畫我猜</title>
    <link href="https://feifacunzai.github.io/2018/09/05/LINE-LIFF-%E4%BD%A0%E7%95%AB%E6%88%91%E7%8C%9C/"/>
    <id>https://feifacunzai.github.io/2018/09/05/LINE-LIFF-%E4%BD%A0%E7%95%AB%E6%88%91%E7%8C%9C/</id>
    <published>2018-09-05T07:46:19.000Z</published>
    <updated>2020-12-19T13:51:20.721Z</updated>
    
    <content type="html"><![CDATA[<p>最近看到 LINE 發佈了「<a href="https://developers.line.me/en/docs/liff/" target="_blank" rel="noopener">LIFF</a>」，找找資料後發現了這篇文章「<a href="https://medium.com/@danielkao/%E5%88%9D%E6%8E%A2-line-message-api-%E7%9A%84%E6%96%B0%E5%8A%9F%E8%83%BD-liff-51d5e7ff1a6a" target="_blank" rel="noopener">初探 LINE Message API 的新功能 LIFF</a>」，看到對方做了 Painting 功能頓時覺得驚為天人，這個思路如果結合群組互動應該會非常有意思，下面就來看看我怎麼完成<code>你畫我猜</code>功能吧。</p><a id="more"></a><h2 id="你畫我猜流程設計"><a href="#你畫我猜流程設計" class="headerlink" title="你畫我猜流程設計"></a>你畫我猜流程設計</h2><ol><li>使用者輸入<code>我想畫畫</code>，機器人回覆相關繪畫模式按紐，點擊按鈕後開啟我們的 LIFF APP。</li><li>使用者於 LIFF APP 繪畫完畢後輸入解答，解答與圖片一起送至後端處理。</li><li>後端將圖片推送至群組內，並開始偵測收到的訊息是否吻合解答。</li><li>偵測到解答，推送遊戲答對者訊息，遊戲完畢。</li></ol><h2 id="開發畫畫功能"><a href="#開發畫畫功能" class="headerlink" title="開發畫畫功能"></a>開發畫畫功能</h2><p>基本有很多開源的套件，我目前是使用這一款<a href="https://github.com/pwambach/angular-canvas-painter" target="_blank" rel="noopener">angular-canvas-painter</a>，套用的方式也很簡單，大致上如下。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">pw-canvas</span> <span class="attr">options</span>=<span class="string">"{width: 400, height: 300, color: '#ff0'}"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  angular.module(<span class="string">"paint"</span>, [<span class="string">"pw.canvas-painter"</span>]);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>成功的後你的 Canvas 現在應該可以畫畫了，接著再加入送出的程式碼，由於我們取得的圖片是 Base64 字串，所以直接跟題目包成 JSON 送就好了，送出成功後呼叫<code>liff.closeWindow()</code>關閉我們的 LIFF APP。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> image = $scope.canvas.toDataURL();</span><br><span class="line">$http({</span><br><span class="line">  method: <span class="string">"POST"</span>,</span><br><span class="line">  url: <span class="string">"/submitImage"</span>,</span><br><span class="line">  data: {</span><br><span class="line">    UserId: userId,</span><br><span class="line">    Data: image,</span><br><span class="line">    Answer: anwser,</span><br><span class="line">  },</span><br><span class="line">}).then(<span class="function"><span class="params">()</span> =&gt;</span> {</span><br><span class="line">  liff.closeWindow();</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p>畫面基本上隨你設計，看個人喜好，大致成果如下。<br><img src="demo-draw.gif"></p><p>畫面完成後，就可以把頁面登錄到 LIFF 上了，這部分官網有詳細的教學，我這裡不多作介紹。</p><h2 id="開發後端處理與推播訊息"><a href="#開發後端處理與推播訊息" class="headerlink" title="開發後端處理與推播訊息"></a>開發後端處理與推播訊息</h2><p>在我的設計中遊戲是有開始與結束的，那我們勢必要記錄這個狀態，除此之外圖片也要保存起來，我這裡偷了個懶，直接把圖片存到 DB 去，大家自己找地方放，反正能讀出來就行。</p><figure class="highlight csharp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> drawGuess = <span class="keyword">new</span> DrawGuessTable()</span><br><span class="line">{</span><br><span class="line">    Answer = model.Answer,</span><br><span class="line">    Game = <span class="keyword">new</span> GameTable()</span><br><span class="line">    {</span><br><span class="line">        IsDone = <span class="literal">false</span>,</span><br><span class="line">    },</span><br><span class="line">    Image = <span class="keyword">new</span> ImageTable()</span><br><span class="line">    {</span><br><span class="line">        Data = model.Data</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line">Db.DrawGuesses.Add(drawGuess);</span><br><span class="line">Db.SaveChanges();</span><br></pre></td></tr></tbody></table></figure><p>由於 LINE API 傳送圖片只收連結，所以必須實做一個 Route 來返回圖檔。</p><figure class="highlight csharp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> IActionResult <span class="title">View</span>(<span class="params"><span class="keyword">int</span> id</span>)</span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">var</span> image = Db.Images.FirstOrDefault(s =&gt; s.Id == id);</span><br><span class="line">    <span class="keyword">var</span> base64Data = Regex.Match(image.Data, <span class="string">@"data:image/(?&lt;type&gt;.+?),(?&lt;data&gt;.+)"</span>).Groups[<span class="string">"data"</span>].Value;</span><br><span class="line">    <span class="keyword">var</span> file = Convert.FromBase64String(base64Data);</span><br><span class="line">    <span class="keyword">return</span> File(file, <span class="string">"image/png"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>推播訊息由於要打 API，較快捷的方法也是用套件，我個人使用這套<a href="https://github.com/dlemstra/line-bot-sdk-dotnet" target="_blank" rel="noopener">line-bot-sdk-dotnet</a>，接著簡單的使用裡面的 Push 方法，並且傳入我們剛寫好的圖片連結。</p><figure class="highlight csharp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PushGameStart</span>(<span class="params"><span class="keyword">string</span> groupId, <span class="keyword">string</span> message, <span class="keyword">string</span> imgId</span>)</span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">var</span> imgUrl = <span class="string">$"<span class="subst">{<span class="keyword">this</span>.webUri}</span>/view?id=<span class="subst">{imgId}</span>"</span>;</span><br><span class="line">    Bot.Push(groupId, <span class="keyword">new</span> TextMessage(message), <span class="keyword">new</span> ImageMessage(imgUrl, imgUrl));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>沒意外的話，文字訊息與圖片會出現至聊天群組中。<br><img src="demo-pushmessage.jpg"></p><p>接著開始判斷 webhook 接收到的訊息是否等於答案，若為是，則該局遊戲結束並推播訊息。</p><figure class="highlight csharp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">CheckAnswer</span>(<span class="params">ILineEvent evt, DrawGuessTable drawGuess, <span class="keyword">string</span> userName</span>)</span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span> (evt.Message.Text == drawGuess.Answer)</span><br><span class="line">    {</span><br><span class="line">        drawGuess.Game.IsDone = <span class="literal">true</span>;</span><br><span class="line">        Db.SaveChanges();</span><br><span class="line">        Bot.Reply(evt.ReplyToken, <span class="keyword">new</span> TextMessage(<span class="string">$"恭喜「<span class="subst">{userName}</span>」答對了，答案是「<span class="subst">{drawGuess.Answer}</span>」"</span>));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>群組中的使用者們在一番激烈的競猜後(?)，系統公佈了最終勝利者。<br><img src="demo-webhook.jpg"></p><p>程式完成後，這段時間群組中發生了許多爆笑的橋段，大家實在是太有創意了，哈哈。<br><img src="demo-sample.jpg"></p><h2 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h2><p>這次使用到的技術相對簡單，感覺還可以用 WebSocket 作一些更有趣的東西，例如即時連線遊戲什麼的，下次有空再來玩看看。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近看到 LINE 發佈了「&lt;a href=&quot;https://developers.line.me/en/docs/liff/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LIFF&lt;/a&gt;」，找找資料後發現了這篇文章「&lt;a href=&quot;https://medium.com/@danielkao/%E5%88%9D%E6%8E%A2-line-message-api-%E7%9A%84%E6%96%B0%E5%8A%9F%E8%83%BD-liff-51d5e7ff1a6a&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;初探 LINE Message API 的新功能 LIFF&lt;/a&gt;」，看到對方做了 Painting 功能頓時覺得驚為天人，這個思路如果結合群組互動應該會非常有意思，下面就來看看我怎麼完成&lt;code&gt;你畫我猜&lt;/code&gt;功能吧。&lt;/p&gt;
    
    </summary>
    
    
      <category term="新奇玩具" scheme="https://feifacunzai.github.io/categories/%E6%96%B0%E5%A5%87%E7%8E%A9%E5%85%B7/"/>
    
    
      <category term="C#" scheme="https://feifacunzai.github.io/tags/C/"/>
    
      <category term=".NET" scheme="https://feifacunzai.github.io/tags/NET/"/>
    
      <category term="LINE" scheme="https://feifacunzai.github.io/tags/LINE/"/>
    
      <category term="LIFF" scheme="https://feifacunzai.github.io/tags/LIFF/"/>
    
      <category term="Bot" scheme="https://feifacunzai.github.io/tags/Bot/"/>
    
  </entry>
  
  <entry>
    <title>用Electron寫一個工具管理器</title>
    <link href="https://feifacunzai.github.io/2018/08/06/%E7%94%A8Electron%E5%AF%AB%E4%B8%80%E5%80%8B%E5%B7%A5%E5%85%B7%E7%AE%A1%E7%90%86%E5%99%A8/"/>
    <id>https://feifacunzai.github.io/2018/08/06/%E7%94%A8Electron%E5%AF%AB%E4%B8%80%E5%80%8B%E5%B7%A5%E5%85%B7%E7%AE%A1%E7%90%86%E5%99%A8/</id>
    <published>2018-08-06T02:42:58.000Z</published>
    <updated>2020-12-19T13:51:20.855Z</updated>
    
    <content type="html"><![CDATA[<p>最近看到<a href="https://electronjs.org/" target="_blank" rel="noopener">Electron</a>可以用網頁技術來開發<code>跨平台桌面應用程式</code>，而桌面應用程式的畫面設計一直是我頭疼的地方，如果這個問題可以用HTML+CSS解決那就太棒啦。</p><a id="more"></a><h2 id="學習目標"><a href="#學習目標" class="headerlink" title="學習目標"></a>學習目標</h2><p>在開始學習前一樣先給自己訂立個目標，這次就來寫個工具管理器，使用情境大致如下：</p><ul><li>使用者可以將系統中的檔案拖拉至程式內形成捷徑</li><li>使用者可以點擊程式中之捷徑開啟檔案</li><li>程式中提供捷徑的基礎管理功能</li></ul><p>除此之外還想順便學習下面兩套工具，所以專案必須用到它們：</p><ul><li><a href="https://vuejs.org/" target="_blank" rel="noopener">Vue.js</a></li><li><a href="http://element-cn.eleme.io/" target="_blank" rel="noopener">Element-UI</a></li></ul><h2 id="建置起始專案"><a href="#建置起始專案" class="headerlink" title="建置起始專案"></a>建置起始專案</h2><ul><li><a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a></li><li><a href="https://github.com/SimulatedGREG/electron-vue" target="_blank" rel="noopener">electron-vue</a></li></ul><p>GitHub上已經有人把Electron與Vue包好了，我們就用它來開始專案吧，先照著下方步驟輸入CMD。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Install vue-cli and scaffold boilerplate</span></span><br><span class="line">npm install -g vue-cli</span><br><span class="line">vue init simulatedgreg/electron-vue toolmanager</span><br><span class="line"></span><br><span class="line"><span class="comment"># Install dependencies and run your app</span></span><br><span class="line"><span class="built_in">cd</span> toolmanager</span><br><span class="line">yarn <span class="comment"># or npm install</span></span><br><span class="line">yarn run dev <span class="comment"># or npm run dev</span></span><br></pre></td></tr></tbody></table></figure><p>接下來應該可以看到程式正常運作起來，成功之後就來寫程式吧。<br><img src="landingpage.jpg"></p><h2 id="開發檔案拖放功能"><a href="#開發檔案拖放功能" class="headerlink" title="開發檔案拖放功能"></a>開發檔案拖放功能</h2><p>首先要完成的是第一個需求，將檔案拖放至程式中，並顯示相關資訊。</p><h3 id="開一個新的Component"><a href="#開一個新的Component" class="headerlink" title="開一個新的Component"></a>開一個新的Component</h3><p>我們需要新增一個可拖放的頁面用來取代目前的首頁，所以將其命名為<code>HomePage</code>並撰寫拖放的<code>dropFile</code>方法。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">  name: <span class="string">'home-page'</span>,</span><br><span class="line">  data () {</span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">      files: []</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  methods: {</span><br><span class="line">    dropFile(event) {</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> file <span class="keyword">of</span> event.dataTransfer.files) {</span><br><span class="line">        <span class="keyword">this</span>.files.push(file);</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="繫結拖放方法"><a href="#繫結拖放方法" class="headerlink" title="繫結拖放方法"></a>繫結拖放方法</h3><p>將<code>template</code>的<code>drop</code>繫結<code>dropFile</code>方法，再用迴圈顯示出拖拉進來的檔案名稱。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"wrapper"</span> <span class="attr">v-on:drop</span>=<span class="string">"dropFile($event)"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"file in files"</span>&gt;</span>{{ file.name }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="添加路由"><a href="#添加路由" class="headerlink" title="添加路由"></a>添加路由</h3><p>最後把HomePage添加到<code>router</code>內，並設為首頁。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router({</span><br><span class="line">  routes: [</span><br><span class="line">    {</span><br><span class="line">      path: <span class="string">'/'</span>,</span><br><span class="line">      name: <span class="string">'home-page'</span>,</span><br><span class="line">      component: <span class="built_in">require</span>(<span class="string">'@/components/HomePage'</span>).default</span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">      path: <span class="string">'*'</span>,</span><br><span class="line">      redirect: <span class="string">'/'</span></span><br><span class="line">    }</span><br><span class="line">  ]</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><p>可以看到下圖，程式已經可以讀取到我們拖放進入的檔案了。<br><img src="dropdemo.gif"></p><h2 id="開發檔案開啟功能"><a href="#開發檔案開啟功能" class="headerlink" title="開發檔案開啟功能"></a>開發檔案開啟功能</h2><p>再來開始第二項需求，讓使用者可以依靠點擊畫面開啟應用程式。</p><h3 id="openExternal"><a href="#openExternal" class="headerlink" title="openExternal"></a>openExternal</h3><p>這裡要注意的是Electron的核心畢竟是瀏覽器，想要用瀏覽器開啟檔案明顯是不對勁的(可能會變成下載)，所以應該透過Electron提供的模組來呼叫原生功能做到開啟檔案這件事情。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">openFile(file) {</span><br><span class="line">  <span class="built_in">require</span>(<span class="string">'electron'</span>).shell.openExternal(file.path);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="繫結開啟檔案方法"><a href="#繫結開啟檔案方法" class="headerlink" title="繫結開啟檔案方法"></a>繫結開啟檔案方法</h3><p>一樣要將openFile事件繫結到我們的畫面上。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"file in files"</span> <span class="attr">v-on:click</span>=<span class="string">"openFile(file)"</span>&gt;</span>{{ file.name }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="Demo-1"><a href="#Demo-1" class="headerlink" title="Demo"></a>Demo</h3><p>這時我們點擊擋案名稱就可以順利開啟該檔案了。<br><img src="openfiledemo.gif"></p><h2 id="重新設計畫面"><a href="#重新設計畫面" class="headerlink" title="重新設計畫面"></a>重新設計畫面</h2><p>先前提到的<code>Element-UI</code>是時候上場了，趕快來用它將畫面質感提升。</p><h3 id="安裝套件"><a href="#安裝套件" class="headerlink" title="安裝套件"></a>安裝套件</h3><p>使用npm或yarn安裝Element。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install element-ui --save</span><br></pre></td></tr></tbody></table></figure><h3 id="引用Element"><a href="#引用Element" class="headerlink" title="引用Element"></a>引用Element</h3><p>在<code>main.js</code>中寫入以下程式。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ElementUI <span class="keyword">from</span> <span class="string">'element-ui'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'element-ui/lib/theme-chalk/index.css'</span>;</span><br><span class="line">Vue.use(ElementUI);</span><br></pre></td></tr></tbody></table></figure><h3 id="設計Layout"><a href="#設計Layout" class="headerlink" title="設計Layout"></a>設計Layout</h3><p>我想讓左邊變成分類，上方列出該分類頁的功能選項，右下方顯示工具列表，用圖片畫出Layout大致如下。<br><img src="layout.jpg"></p><h3 id="開發左側選單"><a href="#開發左側選單" class="headerlink" title="開發左側選單"></a>開發左側選單</h3><p>先將選單資料先定義出來。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">categories: [</span><br><span class="line">  { <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">icon</span>: <span class="string">'el-icon-menu'</span>},</span><br><span class="line">  { <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">icon</span>: <span class="string">'el-icon-star-on'</span>},</span><br><span class="line">  { <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">icon</span>: <span class="string">'el-icon-document'</span>},</span><br><span class="line">  { <span class="attr">id</span>: <span class="number">4</span>, <span class="attr">icon</span>: <span class="string">'el-icon-message'</span>},</span><br><span class="line">  { <span class="attr">id</span>: <span class="number">5</span>, <span class="attr">icon</span>: <span class="string">'el-icon-date'</span>},</span><br><span class="line">  { <span class="attr">id</span>: <span class="number">6</span>, <span class="attr">icon</span>: <span class="string">'el-icon-service'</span>},</span><br><span class="line">  { <span class="attr">id</span>: <span class="number">7</span>, <span class="attr">icon</span>: <span class="string">'el-icon-picture'</span>},</span><br><span class="line">  { <span class="attr">id</span>: <span class="number">8</span>, <span class="attr">icon</span>: <span class="string">'el-icon-edit-outline'</span>},</span><br><span class="line">  { <span class="attr">id</span>: <span class="number">9</span>, <span class="attr">icon</span>: <span class="string">'el-icon-setting'</span>},</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure><p>並將資料顯示於畫面之中。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-aside</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-menu</span> <span class="attr">v-bind:default-active</span>=<span class="string">"1"</span> <span class="attr">collapse</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">v-for</span>=<span class="string">"category in categories"</span> <span class="attr">v-bind:index</span>=<span class="string">"category.id"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span> <span class="attr">v-bind:class</span>=<span class="string">"category.icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-menu</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-aside</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>這樣左側選單就完成了。<br><img src="leftmenu.jpg"></p><h3 id="開發捷徑列表"><a href="#開發捷徑列表" class="headerlink" title="開發捷徑列表"></a>開發捷徑列表</h3><p>使用Electron的Card元件來重新製作畫面，過程中加入xs、sm、md…等屬性作簡單的RWD，讓視窗在改變大小時能有更好的檢視效果。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-row</span> <span class="attr">:gutter</span>=<span class="string">"20"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:xs</span>=<span class="string">"12"</span> <span class="attr">:sm</span>=<span class="string">"6"</span> <span class="attr">:md</span>=<span class="string">"4"</span> <span class="attr">v-for</span>=<span class="string">"(file, index) in files"</span> <span class="attr">:key</span>=<span class="string">"file"</span> <span class="attr">style</span>=<span class="string">"padding-bottom:10px;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-card</span> <span class="attr">class</span>=<span class="string">"card"</span> <span class="attr">:body-style</span>=<span class="string">"{ padding: '0px' }"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"image-container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:src</span>=<span class="string">"file.icon"</span> <span class="attr">class</span>=<span class="string">"image"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"padding: 8px;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card-name"</span>&gt;</span>{{ file.name }}<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-card</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>接著使用Dropdown顯示<code>打開檔案</code>、<code>打開資料夾</code>、<code>刪除捷徑</code>…等控制按鈕，並實作相關功能。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-dropdown</span> <span class="attr">size</span>=<span class="string">"mini"</span> <span class="attr">split-button</span> <span class="attr">type</span>=<span class="string">"primary"</span> <span class="attr">trigger</span>=<span class="string">"click"</span> @<span class="attr">command</span>=<span class="string">"handleCommand($event, file)"</span> @<span class="attr">click</span>=<span class="string">"openFile(file)"</span>&gt;</span></span><br><span class="line">  開啟</span><br><span class="line">  <span class="tag">&lt;<span class="name">el-dropdown-menu</span> <span class="attr">slot</span>=<span class="string">"dropdown"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-dropdown-item</span> <span class="attr">command</span>=<span class="string">"view"</span>&gt;</span>打開位置<span class="tag">&lt;/<span class="name">el-dropdown-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-dropdown-item</span> <span class="attr">command</span>=<span class="string">"del"</span>&gt;</span>刪除捷徑<span class="tag">&lt;/<span class="name">el-dropdown-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-dropdown-menu</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-dropdown</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>這樣捷徑列表也完成了。<br><img src="card.jpg"></p><h3 id="開發Header"><a href="#開發Header" class="headerlink" title="開發Header"></a>開發Header</h3><p>Header只負責顯示目前的分類名稱與刪除該分類，先把畫面設計出來如下圖。<br><img src="header.jpg"></p><p>在刪除時可以使用Element提供的<code>$message</code>功能來讓使用者做Confirm。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$confirm(<span class="string">'此操作會刪除該標籤與底下的捷徑, 是否繼續?'</span>, <span class="string">'提示'</span>, {</span><br><span class="line">  confirmButtonText: <span class="string">'确定'</span>,</span><br><span class="line">  cancelButtonText: <span class="string">'取消'</span>,</span><br><span class="line">  type: <span class="string">'warning'</span></span><br><span class="line">}).then(<span class="function"><span class="params">()</span> =&gt;</span> {</span><br><span class="line">  <span class="keyword">this</span>.categories.splice(<span class="keyword">this</span>.activeIndex, <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">this</span>.$message({</span><br><span class="line">    type: <span class="string">'success'</span>,</span><br><span class="line">    message: <span class="string">'刪除成功!'</span></span><br><span class="line">  });</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p>Message的效果圖。<br><img src="message.gif"></p><h2 id="Build"><a href="#Build" class="headerlink" title="Build"></a>Build</h2><p>終於到了最後一個步驟，程式已經寫的差不多了，該來考慮如何發佈程式了。</p><h3 id="關閉DevTool"><a href="#關閉DevTool" class="headerlink" title="關閉DevTool"></a>關閉DevTool</h3><p>在開發時期一直陪伴著我們的<code>DevTool</code>當然不能讓使用者看到，這時就要進入<code>src/main/index.js</code>修改視窗設定。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mainWindow = <span class="keyword">new</span> BrowserWindow({</span><br><span class="line">  webPreferences: {</span><br><span class="line">    devTools: <span class="literal">false</span></span><br><span class="line">  },</span><br><span class="line">  autoHideMenuBar: <span class="literal">false</span></span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h3 id="修改建置檔"><a href="#修改建置檔" class="headerlink" title="修改建置檔"></a>修改建置檔</h3><p>由於預設是編譯成安裝檔，但我想大多數人都討厭安裝，所以我們就來把它改成單一執行檔的<code>Portable</code>版本，該設定位於<code>package.json</code>下。</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">"win": {</span><br><span class="line">  "icon": "build/icons/icon.ico",</span><br><span class="line">  "target": [</span><br><span class="line">    <span class="string">"portable"</span></span><br><span class="line">  ]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="開始建置"><a href="#開始建置" class="headerlink" title="開始建置"></a>開始建置</h3><p>在CMD輸入以下指令。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></tbody></table></figure><p>成功後可以看到以下訊息。<br><img src="ok.jpg"></p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>這個專案包含這篇文章大概寫了四天左右，總地來說，畫面的確是變好寫了，但不確定是否因為不熟Vue的關係，功能的完成也是非常不簡單，除此之外還發生了各種大大小小的問題，這時才深刻的感覺到，一直在用的<code>VsCode</code>是真的厲害阿！雖然都是用Electron開發，但自己還差得太遠了，需要再好好努力。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近看到&lt;a href=&quot;https://electronjs.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Electron&lt;/a&gt;可以用網頁技術來開發&lt;code&gt;跨平台桌面應用程式&lt;/code&gt;，而桌面應用程式的畫面設計一直是我頭疼的地方，如果這個問題可以用HTML+CSS解決那就太棒啦。&lt;/p&gt;
    
    </summary>
    
    
      <category term="邊學邊寫" scheme="https://feifacunzai.github.io/categories/%E9%82%8A%E5%AD%B8%E9%82%8A%E5%AF%AB/"/>
    
    
      <category term="Electron" scheme="https://feifacunzai.github.io/tags/Electron/"/>
    
      <category term="Element-UI" scheme="https://feifacunzai.github.io/tags/Element-UI/"/>
    
      <category term="Vue.js" scheme="https://feifacunzai.github.io/tags/Vue-js/"/>
    
  </entry>
  
  <entry>
    <title>桌面版彈幕接收器</title>
    <link href="https://feifacunzai.github.io/2018/07/10/%E6%A1%8C%E9%9D%A2%E7%89%88%E5%BD%88%E5%B9%95%E6%8E%A5%E6%94%B6%E5%99%A8/"/>
    <id>https://feifacunzai.github.io/2018/07/10/%E6%A1%8C%E9%9D%A2%E7%89%88%E5%BD%88%E5%B9%95%E6%8E%A5%E6%94%B6%E5%99%A8/</id>
    <published>2018-07-10T02:35:04.000Z</published>
    <updated>2020-12-19T13:51:20.762Z</updated>
    
    <content type="html"><![CDATA[<p>大家有在影音網站看過所謂的彈幕系統嗎？如果在 Coding 的時候收到彈幕那一定別有一番樂趣對吧？本篇文章就來使用<code>SignalR</code>打造桌面版的彈幕接收器，快來為你的工作增添一絲活力吧。</p><a id="more"></a><h2 id="使用情境"><a href="#使用情境" class="headerlink" title="使用情境"></a>使用情境</h2><p>這份專案大致分為三份程式，分別是接收端、Server、發送端。<br>訊息發送端將訊息傳給 Server，Server 再傳給所有接收端，於是彈幕出現在所有接收端畫面上。</p><h2 id="接收端"><a href="#接收端" class="headerlink" title="接收端"></a>接收端</h2><h3 id="建立接收端畫面"><a href="#建立接收端畫面" class="headerlink" title="建立接收端畫面"></a>建立接收端畫面</h3><p>有時候在白底的畫面工作時，有彈幕飛過難免會看不清楚，所以特別設計了一些簡單的參數來修改文字樣式。<br><img src="design.jpg"></p><h3 id="顯示彈幕"><a href="#顯示彈幕" class="headerlink" title="顯示彈幕"></a>顯示彈幕</h3><p>這部分我是參考<a href="https://github.com/aitucao/Danmu-V2/tree/master/DanmakuChi-Client" target="_blank" rel="noopener">Danmu-V2</a>做的，對它的理解只到會動而已，稍作簡單的修改後，大致上可以如圖呼叫它，並把我們的參數傳給它。</p><figure class="highlight cs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ShootDanmaku</span>(<span class="params"><span class="keyword">string</span> text</span>)</span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    Application.Current.Dispatcher.BeginInvoke(DispatcherPriority.Background, <span class="keyword">new</span> Action(() =&gt;</span><br><span class="line">    {</span><br><span class="line">        dmkCurt.Shoot(text, isBorder, isRandomColor, fontSize);</span><br><span class="line">    }));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="連接-Server"><a href="#連接-Server" class="headerlink" title="連接 Server"></a>連接 Server</h3><p>先安裝套件<a href="https://www.nuget.org/packages/Microsoft.AspNet.SignalR.Client/" target="_blank" rel="noopener">Microsoft.AspNet.SignalR.Client</a>。<br><img src="signalr-client.jpg"></p><p>程式開啟時，建立 Server 連線，並註冊 Server 傳來的<code>shootDanmu</code>事件。</p><figure class="highlight cs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Connection = <span class="keyword">new</span> HubConnection(<span class="string">"http://xx.xx.xx.xx/"</span>);</span><br><span class="line">IHubProxy myHub = Connection.CreateHubProxy(<span class="string">"ChatHub"</span>);</span><br><span class="line">myHub.On&lt;<span class="keyword">string</span>&gt;(<span class="string">"shootDanmu"</span>, (message) =&gt; {</span><br><span class="line">    ShootDanmaku(message);</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p>確定連接上後，還可以在 Server 上加入一個 SignalR 的 Group(Server 那段會提到)，方便 Server 區分 Client。</p><figure class="highlight cs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Connection.Start().ContinueWith(task =&gt;</span><br><span class="line">{</span><br><span class="line">    <span class="keyword">if</span> (!task.IsFaulted)</span><br><span class="line">    {</span><br><span class="line">        myHub.Invoke(<span class="string">"BilibiliJoin"</span>);</span><br><span class="line">    }</span><br><span class="line">}).Wait();</span><br></pre></td></tr></tbody></table></figure><h2 id="Server-端"><a href="#Server-端" class="headerlink" title="Server 端"></a>Server 端</h2><h3 id="擴充-ChatHub"><a href="#擴充-ChatHub" class="headerlink" title="擴充 ChatHub"></a>擴充 ChatHub</h3><p>剛好以前寫過的<a href="/2018/01/05/%E9%97%9C%E6%96%BC%E5%AF%AB%E5%80%8B%E8%81%8A%E5%A4%A9%E5%AE%A4%E9%80%99%E4%BB%B6%E4%BA%8B-%E4%B8%89-%E5%90%8C%E6%AD%A5%E8%A8%8A%E6%81%AF/#more">聊天室</a>有用到 SignalR，只要把彈幕使用者用 Group 功能區分開來就 OK 了。使用情境是這樣，當彈幕接收端開啟時，會呼叫<code>BilibiliJoin</code>方法，並將自己的 Id 添加進 Group。</p><figure class="highlight cs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">BilibiliJoin</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    Groups.Add(Context.ConnectionId, <span class="string">"bilibili"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>Server 接收到訊息時，會將訊息轉傳到此 Group 中，並呼叫<code>shootDanmu</code>方法。</p><figure class="highlight cs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SyncMessage</span>(<span class="params"><span class="keyword">string</span> message</span>)</span> {</span><br><span class="line">    Clients.Group(<span class="string">"bilibili"</span>).shootDanmu(message);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="發送端"><a href="#發送端" class="headerlink" title="發送端"></a>發送端</h2><p>隨便寫支程式，反正只要能呼叫到 Server 的<code>SyncMessage</code>方法就成了，這裡不贅述。</p><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p><img src="danmu.gif"></p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>最近從上一份工作離職了，但有了這支程式偶爾用來洗洗對方的畫面，感覺就好像我還在同事們身邊一樣呢，聊天室還不快刷一波 6666666666。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;大家有在影音網站看過所謂的彈幕系統嗎？如果在 Coding 的時候收到彈幕那一定別有一番樂趣對吧？本篇文章就來使用&lt;code&gt;SignalR&lt;/code&gt;打造桌面版的彈幕接收器，快來為你的工作增添一絲活力吧。&lt;/p&gt;
    
    </summary>
    
    
      <category term="腦洞大開" scheme="https://feifacunzai.github.io/categories/%E8%85%A6%E6%B4%9E%E5%A4%A7%E9%96%8B/"/>
    
    
      <category term="C#" scheme="https://feifacunzai.github.io/tags/C/"/>
    
      <category term=".NET" scheme="https://feifacunzai.github.io/tags/NET/"/>
    
      <category term="SignalR" scheme="https://feifacunzai.github.io/tags/SignalR/"/>
    
  </entry>
  
  <entry>
    <title>AvKit 低潮管理器</title>
    <link href="https://feifacunzai.github.io/2018/05/14/AvKit-%E4%BD%8E%E6%BD%AE%E7%AE%A1%E7%90%86%E5%99%A8/"/>
    <id>https://feifacunzai.github.io/2018/05/14/AvKit-%E4%BD%8E%E6%BD%AE%E7%AE%A1%E7%90%86%E5%99%A8/</id>
    <published>2018-05-14T06:12:38.000Z</published>
    <updated>2020-12-19T13:51:20.505Z</updated>
    
    <content type="html"><![CDATA[<p>由於最近工作不順，人生仿佛陷入了<code>低潮</code>之中，那該如何快速擺脫低潮期就變成了一個至關重要的問題，而身為一個程式設計師，就應該利用自己的優勢「程式設計」來解決問題，於是我就開發了這支<code>低潮管理器</code>。</p><a id="more"></a><h2 id="建檔"><a href="#建檔" class="headerlink" title="建檔"></a>建檔</h2><p>低潮是沒有底線的，隨著時間的增長低潮也會越來越大，這個時候我們也會愈發的難以管理它，所以我寫了一個<code>路徑遞迴搜尋低潮</code>功能，來做到低潮一鍵建檔，降低低潮的維護難度，理所當然地，第二次選擇相同路徑時，也會過濾掉已重複建檔的檔案，並挑出尚未建檔的資料進行匯入。<br><img src="demo01.jpg"></p><h2 id="可視化"><a href="#可視化" class="headerlink" title="可視化"></a>可視化</h2><p>能夠清清楚楚地看到低潮與其相關資訊無疑可以幫助我們管理它，這裡依照自己的需求設計了三個分別為<code>卡片</code>、<code>列表</code>、<code>混合型</code>的檢視模式，若是有長方形的封面還會幫你切出右半部方便預覽。<br><img src="demo02.jpg"></p><h2 id="搜尋引擎"><a href="#搜尋引擎" class="headerlink" title="搜尋引擎"></a>搜尋引擎</h2><p>好的搜尋工具可以避免自己陷入重複的低潮中。理論上，低潮的檔名都有一個所謂的前綴，例如「<code>ABCD</code>-001」、「<code>ZZ</code>-987」，在匯入時挑出這些類別，並幫相關檔案進行分類，這麼做的好處除了可以方便做搜尋引擎，也能使自己更瞭解自己的低潮喜好與分佈狀況。<br><img src="demo03.jpg"></p><h2 id="重新命名"><a href="#重新命名" class="headerlink" title="重新命名"></a>重新命名</h2><p>低潮發生時，偶爾會出現檔案名稱雜訊過多的問題，例如「[balabala](05-14)ABCD-001hd」之類的，發生這種問題時會不利於我們之後要做的<code>線上取得低潮資訊</code>功能，所以我寫了一個小工具來幫助使用者挑出其關鍵字<code>ABCD-001</code>，並將檔案重新命名。<br><img src="demo04.jpg"></p><h2 id="路徑重構"><a href="#路徑重構" class="headerlink" title="路徑重構"></a>路徑重構</h2><p>在我的電腦會發生一種情況，當低潮的同個資料夾下有過多的多媒體檔案時，開啟此資料夾的速度會變得極慢，所以我也加入了自動檢測該檔案是否有建立同檔名資料夾的功能，並自動建立其上層資料夾，透過這個方式來解決問題。<br><img src="demo05.jpg"></p><h2 id="資訊同步"><a href="#資訊同步" class="headerlink" title="資訊同步"></a>資訊同步</h2><p>其實這才是我做這支程式的主要目的。因為<code>一定要打開檔案才能百分之百的知道低潮的內容物是什麼</code>這件問題深深的困擾著我，除了有時候會沒有封面外，封面與內容不符也是個重大的問題。所以取得該低潮資訊，如<code>封面</code>、<code>品名</code>、<code>廠商</code>、<code>參與者</code>、<code>標籤</code>…等，無疑可以幫助使用者提高自己低潮的掌握度。<br><img src="demo06.jpg"></p><h2 id="資訊修改"><a href="#資訊修改" class="headerlink" title="資訊修改"></a>資訊修改</h2><p>低潮是如此的博大精深，當然也無法做到盡善盡美，當無法從線上取得資訊時，就靠自己來建立吧。<br><img src="demo08.jpg"></p><h2 id="右鍵選單"><a href="#右鍵選單" class="headerlink" title="右鍵選單"></a>右鍵選單</h2><p>找到自己想要的低潮後就可以嘗試解決問題啦。<br><img src="demo07.jpg"></p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>真的很想放出這支程式來幫助人，但我在開發時使用了<a href="https://www.devexpress.com/" target="_blank" rel="noopener">Devexpress</a>的多個套件，而這套工具是所在公司購買的授權，發佈怕是會有違法嫌疑，或許等我有一天自己買了授權就可以公開啦。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由於最近工作不順，人生仿佛陷入了&lt;code&gt;低潮&lt;/code&gt;之中，那該如何快速擺脫低潮期就變成了一個至關重要的問題，而身為一個程式設計師，就應該利用自己的優勢「程式設計」來解決問題，於是我就開發了這支&lt;code&gt;低潮管理器&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="腦洞大開" scheme="https://feifacunzai.github.io/categories/%E8%85%A6%E6%B4%9E%E5%A4%A7%E9%96%8B/"/>
    
    
      <category term="C#" scheme="https://feifacunzai.github.io/tags/C/"/>
    
      <category term=".NET" scheme="https://feifacunzai.github.io/tags/NET/"/>
    
      <category term="Windows Forms" scheme="https://feifacunzai.github.io/tags/Windows-Forms/"/>
    
  </entry>
  
  <entry>
    <title>Windows Form 與 Dependency Injection</title>
    <link href="https://feifacunzai.github.io/2018/05/03/Windows-Form-%E8%88%87-Dependency-Injection/"/>
    <id>https://feifacunzai.github.io/2018/05/03/Windows-Form-%E8%88%87-Dependency-Injection/</id>
    <published>2018-05-03T06:24:40.000Z</published>
    <updated>2020-12-19T13:51:20.736Z</updated>
    
    <content type="html"><![CDATA[<p>最近在寫<code>Windows Forms App</code>時遇到了一些小問題，於是就想到或許可以透過一些<code>Dependency Injection</code>的特性來解決這些問題，於是有了這篇文章。</p><a id="more"></a><h2 id="尋找-DI-套件"><a href="#尋找-DI-套件" class="headerlink" title="尋找 DI 套件"></a>尋找 DI 套件</h2><p>之前在寫網頁時都是靠<a href="https://autofac.org/" target="_blank" rel="noopener">Autofac</a>實現依賴注入，但在Windows Form又該如何做到勒？</p><p>我Google後試用了下面兩款套件：</p><ul><li><a href="http://simpleinjector.readthedocs.io/en/latest/" target="_blank" rel="noopener">Simple Injector</a></li><li><a href="http://www.ninject.org/" target="_blank" rel="noopener">Ninject</a></li></ul><p>兩款都可以簡單的做到DI，但最終我選擇了<code>Ninject</code>，原因在於它相較於第一款更簡單(這點我不確定，也可能是我理解不夠)。</p><h2 id="使用-Ninject"><a href="#使用-Ninject" class="headerlink" title="使用 Ninject"></a>使用 Ninject</h2><p>決定好之後就立刻用Nuget把它裝起來吧。<br><img src="nuget.jpg"></p><h3 id="Ninject-Module"><a href="#Ninject-Module" class="headerlink" title="Ninject Module"></a>Ninject Module</h3><p>若有特別的需求時，可以在<code>Ninject Module</code>進行相關設定與處理，下面我們就來實作它。</p><figure class="highlight cs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DependencyModule</span> : <span class="title">NinjectModule</span></span><br><span class="line">{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Load</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line">      <span class="comment">//特殊設定與處理</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="Kernel"><a href="#Kernel" class="headerlink" title="Kernel"></a>Kernel</h3><p><code>Kernel</code>可以自動尋找程式中的相依性進行注入並建立該物件，我們改用Kernal來建立Windows Form的起始程序<code>Form1</code>。</p><figure class="highlight cs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="comment">//Application.Run(new Form1());</span></span><br><span class="line">    IKernel kernel = <span class="keyword">new</span> StandardKernel(<span class="keyword">new</span> DependencyModule());</span><br><span class="line">    Application.Run(kernel.Get&lt;Form1&gt;());</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="完成設置"><a href="#完成設置" class="headerlink" title="完成設置"></a>完成設置</h3><p>Ninject到這裡基本上就設定完成了，下面我們就來看看它改變了什麼，並解決了些什麼問題吧。</p><h2 id="問題一-複雜的建構子"><a href="#問題一-複雜的建構子" class="headerlink" title="問題一 複雜的建構子"></a>問題一 複雜的建構子</h2><p>如果你的程式有分層的話，那你可能也有這個問題，使用DI前我的建構子充斥著各種各樣的實作物件。</p><figure class="highlight cs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Form1</span> : <span class="title">Form</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">public</span> ClassA _classA { <span class="keyword">get</span>; <span class="keyword">set</span>; }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Form1</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line">        _classA = <span class="keyword">new</span> ClassA(<span class="keyword">new</span> ClassB(<span class="keyword">new</span> ClassC()));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>使用DI之後，只需要將ClassA加入建構子參數，其內的相依性建立都會自動完成，程式也容易閱讀了許多。</p><figure class="highlight cs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Form1</span> : <span class="title">Form</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">public</span> ClassA _classA { <span class="keyword">get</span>; <span class="keyword">set</span>; }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Form1</span>(<span class="params">ClassA classA</span>)</span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line">        _classA = classA;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="問題二-狀態不一致的Form"><a href="#問題二-狀態不一致的Form" class="headerlink" title="問題二 狀態不一致的Form"></a>問題二 狀態不一致的Form</h2><p>假設有一個處理資料的訊息紀錄框<code>Form2</code>，像下圖。<br><img src="form2.jpg"></p><p>一般我們由Form1呼叫出Form2，可能會使用下面的程式。</p><figure class="highlight cs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Form1</span> : <span class="title">Form</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">public</span> Form2 _form2 { <span class="keyword">get</span>; <span class="keyword">set</span>; }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Form1</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line">        _form2 = <span class="keyword">new</span> Form2();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button1_Click</span>(<span class="params"><span class="keyword">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line">        _form2.ShowDialog();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>但如果Form3也要叫出Form2，並且Form2要保留被Form1呼叫時的狀態的話，程式會變得非常麻煩，必須由Form1將已建立的Form2傳給Form3。</p><figure class="highlight cs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Form1</span> : <span class="title">Form</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">public</span> Form2 _form2 { <span class="keyword">get</span>; <span class="keyword">set</span>; }</span><br><span class="line">    <span class="keyword">public</span> Form3 _form3 { <span class="keyword">get</span>; <span class="keyword">set</span>; }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Form1</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line">        _form2 = <span class="keyword">new</span> Form2();</span><br><span class="line">        _form3 = <span class="keyword">new</span> Form3(_form2);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Form3</span> : <span class="title">Form</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">public</span> Form2 _form2 { <span class="keyword">get</span>; <span class="keyword">set</span>; }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Form3</span>(<span class="params">Form2 form2</span>)</span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line">        _form2 = form2;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button1_Click</span>(<span class="params"><span class="keyword">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line">        _form2.ShowDialog();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>這些都可以透過DI解決，只要在<code>NinjectModule</code>中將Form2的被注入時的規則改成<code>InSingletonScope</code>讓它一直被重複使用就行了。</p><figure class="highlight cs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DependencyModule</span> : <span class="title">NinjectModule</span></span><br><span class="line">{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Load</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line">        Bind&lt;Form2&gt;().To&lt;Form2&gt;().InSingletonScope();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>其實就是個小工具而已，能夠讓開發者省略很多實作物件的步驟，非常推薦大家使用。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在寫&lt;code&gt;Windows Forms App&lt;/code&gt;時遇到了一些小問題，於是就想到或許可以透過一些&lt;code&gt;Dependency Injection&lt;/code&gt;的特性來解決這些問題，於是有了這篇文章。&lt;/p&gt;
    
    </summary>
    
    
      <category term="學習心得" scheme="https://feifacunzai.github.io/categories/%E5%AD%B8%E7%BF%92%E5%BF%83%E5%BE%97/"/>
    
    
      <category term="C#" scheme="https://feifacunzai.github.io/tags/C/"/>
    
      <category term=".NET" scheme="https://feifacunzai.github.io/tags/NET/"/>
    
      <category term="Windows Forms" scheme="https://feifacunzai.github.io/tags/Windows-Forms/"/>
    
      <category term="Dependency Injection" scheme="https://feifacunzai.github.io/tags/Dependency-Injection/"/>
    
  </entry>
  
  <entry>
    <title>查詢同事在幹麻</title>
    <link href="https://feifacunzai.github.io/2018/03/27/%E6%9F%A5%E8%A9%A2%E5%90%8C%E4%BA%8B%E5%9C%A8%E5%B9%B9%E9%BA%BB/"/>
    <id>https://feifacunzai.github.io/2018/03/27/%E6%9F%A5%E8%A9%A2%E5%90%8C%E4%BA%8B%E5%9C%A8%E5%B9%B9%E9%BA%BB/</id>
    <published>2018-03-27T08:13:07.000Z</published>
    <updated>2020-12-19T13:51:20.757Z</updated>
    
    <content type="html"><![CDATA[<p>在上班時間把工作處理完畢後，不儘會好奇地想到<code>我的那幾個同事在忙啥？</code>，這篇文章就來實作<code>查詢同事在幹麻</code>功能，讓大家在互相幫助上無遠弗屆，增進彼此之間的情誼。</p><a id="more"></a><h2 id="使用情境"><a href="#使用情境" class="headerlink" title="使用情境"></a>使用情境</h2><p>同事們主要是使用Skype來傳遞訊息，最終目標是希望可以達成用傳送訊息的方式，完成關心對方的目的，並返回可以快速了解對方在幹麻的結果。</p><h2 id="申請-Microsoft-Bot-Framework"><a href="#申請-Microsoft-Bot-Framework" class="headerlink" title="申請 Microsoft Bot Framework"></a>申請 Microsoft Bot Framework</h2><p>要串接Skype勢必要申請該服務，詳情這裡不介紹。</p><h2 id="訊息接收功能"><a href="#訊息接收功能" class="headerlink" title="訊息接收功能"></a>訊息接收功能</h2><p>當Bot正常運作後，要讓Server能夠即時的查詢各個同事在幹麻，我只想到在大家的電腦都裝上個程式來提供呼叫，在呼叫之前，我們必須讓接收到的訊息可以區分出各個同事，並且建立各個同事的相對應IP。<br><img src="ip.jpg"></p><h2 id="發送查詢命令"><a href="#發送查詢命令" class="headerlink" title="發送查詢命令"></a>發送查詢命令</h2><p>發送指令給各個同事的電腦，就選用Tcp吧。</p><figure class="highlight cs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tcpClient = <span class="keyword">new</span> TcpClient();</span><br><span class="line"><span class="keyword">if</span> (!tcpClient.ConnectAsync(ip, <span class="number">8787</span>).Wait(<span class="number">2000</span>))</span><br><span class="line">{</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">$"<span class="subst">{userName}</span>不想讓人知道他在幹麻"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> stream = tcpClient.GetStream();</span><br></pre></td></tr></tbody></table></figure><h2 id="查詢命令接收端"><a href="#查詢命令接收端" class="headerlink" title="查詢命令接收端"></a>查詢命令接收端</h2><p>接收命令當然也如上面使用Tcp。</p><figure class="highlight cs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> listener = <span class="keyword">new</span> TcpListener(IPAddress.Any, <span class="number">8787</span>);</span><br><span class="line">listener.Start();</span><br><span class="line"><span class="keyword">var</span> recData = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">{</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span> (listener.Pending())</span><br><span class="line">        {</span><br><span class="line">            Console.WriteLine(<span class="string">$"有人想知道你在幹麻 - <span class="subst">{DateTime.Now}</span>"</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">    {</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="接收端回傳螢幕截圖"><a href="#接收端回傳螢幕截圖" class="headerlink" title="接收端回傳螢幕截圖"></a>接收端回傳螢幕截圖</h2><p>要如何簡單有效的知道對方在幹麻呢？或許直接回傳螢幕截圖可以達到目的。</p><figure class="highlight cs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bounds = Screen.GetBounds(Point.Empty);</span><br><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> bitmap = <span class="keyword">new</span> Bitmap(bounds.Width, bounds.Height))</span><br><span class="line">{</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> g = Graphics.FromImage(bitmap))</span><br><span class="line">    {</span><br><span class="line">        g.CopyFromScreen(Point.Empty, Point.Empty, bounds.Size);</span><br><span class="line">    }</span><br><span class="line">    bitmap.Save(memoryStream, ImageFormat.Jpeg);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> client = listener.AcceptTcpClient();</span><br><span class="line"><span class="keyword">var</span> fileBytes = memoryStream.ToArray();</span><br><span class="line"><span class="keyword">var</span> netstream = client.GetStream();</span><br><span class="line">netstream.Write(fileBytes, <span class="number">0</span>, fileBytes.Length);</span><br><span class="line">netstream.Close();</span><br><span class="line">client.Close();</span><br></pre></td></tr></tbody></table></figure><h2 id="取得查詢結果並回傳至聊天室"><a href="#取得查詢結果並回傳至聊天室" class="headerlink" title="取得查詢結果並回傳至聊天室"></a>取得查詢結果並回傳至聊天室</h2><p>將接收到的stream轉為byte。</p><figure class="highlight cs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> totalrecbytes = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> result = <span class="keyword">new</span> MemoryStream();</span><br><span class="line"><span class="keyword">int</span> recBytes;</span><br><span class="line"><span class="keyword">byte</span>[] recData = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1000</span>];</span><br><span class="line"><span class="keyword">while</span> ((recBytes = stream.Read(recData, <span class="number">0</span>, recData.Length)) &gt; <span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line">    result.Write(recData, <span class="number">0</span>, recBytes);</span><br><span class="line">    totalrecbytes += recBytes;</span><br><span class="line">}</span><br><span class="line">result.Close();</span><br><span class="line">stream.Close();</span><br><span class="line">tcpClient.Close();</span><br><span class="line"><span class="keyword">return</span> result.ToArray();</span><br></pre></td></tr></tbody></table></figure><h2 id="執行結果"><a href="#執行結果" class="headerlink" title="執行結果"></a>執行結果</h2><p>這時當有人在聊天室詢問某人在幹麻時，接收端就會收到訊息。<br><img src="receive.jpg"></p><p>並在聊天室顯示該名同事的桌面。<br><img src="demo1.jpg"></p><p>對方關閉的話也會提示相關訊息。<br><img src="demo2.jpg"></p><h2 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h2><p>哇～同事在幹麻真的一覽無遺了呢！但後來他們都不開，我寫這麼辛苦，真的hen心寒。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在上班時間把工作處理完畢後，不儘會好奇地想到&lt;code&gt;我的那幾個同事在忙啥？&lt;/code&gt;，這篇文章就來實作&lt;code&gt;查詢同事在幹麻&lt;/code&gt;功能，讓大家在互相幫助上無遠弗屆，增進彼此之間的情誼。&lt;/p&gt;
    
    </summary>
    
    
      <category term="腦洞大開" scheme="https://feifacunzai.github.io/categories/%E8%85%A6%E6%B4%9E%E5%A4%A7%E9%96%8B/"/>
    
    
      <category term="C#" scheme="https://feifacunzai.github.io/tags/C/"/>
    
      <category term=".NET" scheme="https://feifacunzai.github.io/tags/NET/"/>
    
      <category term="Bot" scheme="https://feifacunzai.github.io/tags/Bot/"/>
    
      <category term="Skype" scheme="https://feifacunzai.github.io/tags/Skype/"/>
    
  </entry>
  
  <entry>
    <title>關於寫個聊天室這件事 (四)加強使用者體驗</title>
    <link href="https://feifacunzai.github.io/2018/01/22/%E9%97%9C%E6%96%BC%E5%AF%AB%E5%80%8B%E8%81%8A%E5%A4%A9%E5%AE%A4%E9%80%99%E4%BB%B6%E4%BA%8B-%E5%9B%9B-%E5%8A%A0%E5%BC%B7%E4%BD%BF%E7%94%A8%E8%80%85%E9%AB%94%E9%A9%97/"/>
    <id>https://feifacunzai.github.io/2018/01/22/%E9%97%9C%E6%96%BC%E5%AF%AB%E5%80%8B%E8%81%8A%E5%A4%A9%E5%AE%A4%E9%80%99%E4%BB%B6%E4%BA%8B-%E5%9B%9B-%E5%8A%A0%E5%BC%B7%E4%BD%BF%E7%94%A8%E8%80%85%E9%AB%94%E9%A9%97/</id>
    <published>2018-01-22T08:39:55.000Z</published>
    <updated>2020-12-19T13:51:20.908Z</updated>
    
    <content type="html"><![CDATA[<p>聊天室用著用著總是能夠發現不足的地方，如果連身為開發者的自己都覺得難用那簡直是一種恥辱，這篇文章就記錄一些自我改進的地方與如何用現成套件來幫助解決這些問題。</p><a id="more"></a><h2 id="顯示正在聊天室的使用者"><a href="#顯示正在聊天室的使用者" class="headerlink" title="顯示正在聊天室的使用者"></a>顯示正在聊天室的使用者</h2><p>只要使用上一篇文章提到的<code>SignalR</code>，偵測連接事件，這樣就可以即時顯示連線中的使用者。<br><img src="demo01.jpg"></p><h2 id="模糊處理"><a href="#模糊處理" class="headerlink" title="模糊處理"></a>模糊處理</h2><p>前些時候為了方便文章截圖，我還特別建置了一個測試環境來避免洩漏個資，現在直接用<code>Css</code>寫了模糊效果，並用<code>JS</code>開關來保護機敏資料；轉念一想，偶爾開啟這個功能，讓聊天室的使用者不知道彼此是誰，這樣聊起來也是別有一番趣味。<br><img src="demo02.jpg"></p><h2 id="對話挑出連結並進行轉換"><a href="#對話挑出連結並進行轉換" class="headerlink" title="對話挑出連結並進行轉換"></a>對話挑出連結並進行轉換</h2><p>輸入的對話若出現了連結，總不可能叫使用者自己複製去瀏覽器貼來看。所以就用<code>正規式</code>把連結挑出來，然後使用<code>&lt;a href=""&gt;&lt;/a&gt;</code>替換原文，這樣連結就好讀、好點多了對吧。<br><img src="demo03.jpg"></p><h2 id="讓聊天室捲軸至底"><a href="#讓聊天室捲軸至底" class="headerlink" title="讓聊天室捲軸至底"></a>讓聊天室捲軸至底</h2><p>隨著對話紀錄往下增長，捲軸也會面臨幾個問題，譬如說正在往上觀看聊天紀錄的人不應該因為新的紀錄而被至底，只有正在至底的人才會被新紀錄至底…等等，實際上做起來並不是那麼容易，但好在找到了一個外掛解決了這個問題「<a href="https://github.com/Luegg/angularjs-scroll-glue" target="_blank" rel="noopener">angularjs-scroll-gule</a>」。<br><img src="demo04.gif"></p><h2 id="新訊息提示"><a href="#新訊息提示" class="headerlink" title="新訊息提示"></a>新訊息提示</h2><p>使用者當然不會保持聊天室的視窗至頂，那有新訊息時就用「<a href="https://developer.chrome.com/apps/notifications" target="_blank" rel="noopener">Chrome Notifications Api</a>」來通知使用者吧，這樣就可以簡單做到螢幕右下角彈出訊息視窗了。<br><img src="demo05.jpg"></p><h2 id="顯示Emoji"><a href="#顯示Emoji" class="headerlink" title="顯示Emoji"></a>顯示Emoji</h2><p>聊天室必不可少的東西，可以有效幫助氣氛更活絡、語氣更生動，還好也是有套件「<a href="https://github.com/mervick/emojionearea" target="_blank" rel="noopener">EmojiOne Area</a>」可以快速使用，相似的套件我挑了很久，還是最喜歡這款。<br><img src="demo06.jpg"></p><h2 id="句尾顯示笑臉"><a href="#句尾顯示笑臉" class="headerlink" title="句尾顯示笑臉"></a>句尾顯示笑臉</h2><p>都說笑容會感染，雖然不知文字有沒有同樣的效果，但或多或少應該可以修飾一下語氣吧？<br><img src="demo07.jpg"></p><h2 id="傳送圖片"><a href="#傳送圖片" class="headerlink" title="傳送圖片"></a>傳送圖片</h2><p>檔案上傳真的是不太好做，但如果只是讓使用者貼個圖片連結那還是可以的。<br><img src="demo08.gif"></p><h2 id="傳送影片"><a href="#傳送影片" class="headerlink" title="傳送影片"></a>傳送影片</h2><p>同傳送圖片。<br><img src="demo09.gif"></p><h2 id="圈圈叉叉"><a href="#圈圈叉叉" class="headerlink" title="圈圈叉叉"></a>圈圈叉叉</h2><p>簡單的連線遊戲也可以使用iFrame+SignalR做到。<br><img src="demo10.gif"></p><h2 id="五子棋"><a href="#五子棋" class="headerlink" title="五子棋"></a>五子棋</h2><p>同圈圈叉叉。<br><img src="demo11.gif"></p><h2 id="隨機產生一些提神-的圖片"><a href="#隨機產生一些提神-的圖片" class="headerlink" title="隨機產生一些提神(?)的圖片"></a>隨機產生一些提神(?)的圖片</h2><p>到底產生了什麼，真的不方BANG多縮，應同仁要求加入了點擊解除模糊的事件。<br><img src="demo12.gif"></p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>暫時只做了這些，還有很多改進空間，嗯…只能繼續努力。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;聊天室用著用著總是能夠發現不足的地方，如果連身為開發者的自己都覺得難用那簡直是一種恥辱，這篇文章就記錄一些自我改進的地方與如何用現成套件來幫助解決這些問題。&lt;/p&gt;
    
    </summary>
    
    
      <category term="經驗分享" scheme="https://feifacunzai.github.io/categories/%E7%B6%93%E9%A9%97%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="C#" scheme="https://feifacunzai.github.io/tags/C/"/>
    
      <category term=".NET" scheme="https://feifacunzai.github.io/tags/NET/"/>
    
      <category term="SignalR" scheme="https://feifacunzai.github.io/tags/SignalR/"/>
    
      <category term="JS" scheme="https://feifacunzai.github.io/tags/JS/"/>
    
      <category term="AngularJS" scheme="https://feifacunzai.github.io/tags/AngularJS/"/>
    
  </entry>
  
  <entry>
    <title>關於寫個聊天室這件事 (三)同步訊息</title>
    <link href="https://feifacunzai.github.io/2018/01/05/%E9%97%9C%E6%96%BC%E5%AF%AB%E5%80%8B%E8%81%8A%E5%A4%A9%E5%AE%A4%E9%80%99%E4%BB%B6%E4%BA%8B-%E4%B8%89-%E5%90%8C%E6%AD%A5%E8%A8%8A%E6%81%AF/"/>
    <id>https://feifacunzai.github.io/2018/01/05/%E9%97%9C%E6%96%BC%E5%AF%AB%E5%80%8B%E8%81%8A%E5%A4%A9%E5%AE%A4%E9%80%99%E4%BB%B6%E4%BA%8B-%E4%B8%89-%E5%90%8C%E6%AD%A5%E8%A8%8A%E6%81%AF/</id>
    <published>2018-01-05T07:00:50.000Z</published>
    <updated>2020-12-19T13:51:20.901Z</updated>
    
    <content type="html"><![CDATA[<p>記得很久以前也寫過一個聊天室，當時使用JS每秒向後端查詢一次訊息紀錄，藉此來達到讓所有使用者訊息同步的目的，可想而知這個查詢量是非常龐大的，奈何以前知識有限，並沒有找到更好的解決方案。但現在發現了<code>SignalR</code>這個東西，總算是解決了多年前的一個遺憾。</p><a id="more"></a><h2 id="什麼是SignalR"><a href="#什麼是SignalR" class="headerlink" title="什麼是SignalR?"></a>什麼是SignalR?</h2><p>其實我也還沒有很理解「<a href="https://docs.microsoft.com/en-us/aspnet/signalr/overview/getting-started/introduction-to-signalr" target="_blank" rel="noopener">SignalR</a>」的原理，官方的介紹有看沒有很懂，但還是嘗試在這裡記錄下自己觀察到的東西。</p><h3 id="Hub與HubProxy"><a href="#Hub與HubProxy" class="headerlink" title="Hub與HubProxy"></a>Hub與HubProxy</h3><p>必須在Client端中實作HubProxy，它的作用是跟Server端中的Hub進行持續連線，Server端也由此獲得了主動通知Client端的能力，並且多個Client端之間可以藉由Hub廣播的特性傳遞資料或執行Client端的方法。</p><h3 id="以聊天室舉例"><a href="#以聊天室舉例" class="headerlink" title="以聊天室舉例"></a>以聊天室舉例</h3><p>使用者A、使用者B，分別進入了聊天室，並都與後端進行了持續連線；當使用者A傳送了訊息”Hello”後，Hub會找到目前正在連線中的使用者A、B，並廣播該訊息”Hello”顯示於畫面上。</p><h2 id="如何實作聊天室SignalR"><a href="#如何實作聊天室SignalR" class="headerlink" title="如何實作聊天室SignalR?"></a>如何實作聊天室SignalR?</h2><p>可以先看看「<a href="https://www.asp.net/signalr" target="_blank" rel="noopener">官方教學</a>」中的Tutorial，然後參考下面步驟依樣畫葫蘆就可以簡單完成。</p><h3 id="建立同步訊息Hub"><a href="#建立同步訊息Hub" class="headerlink" title="建立同步訊息Hub"></a>建立同步訊息Hub</h3><p>當Hub收到訊息後，必須找出所有連接中的使用者，並傳送此訊息，程式如下。</p><figure class="highlight cs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ChatHub</span> : <span class="title">Hub</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">private</span> ChatService ChatService { <span class="keyword">get</span>; <span class="keyword">set</span>; }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ChatHub</span>(<span class="params"></span>)</span> {</span><br><span class="line">        <span class="keyword">this</span>.ChatService = <span class="keyword">new</span> ChatService();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SyncMessage</span>(<span class="params"><span class="keyword">string</span> message</span>)</span> {</span><br><span class="line">        <span class="keyword">var</span> chat = ChatService.Write(<span class="keyword">new</span> MessageRequestModel()</span><br><span class="line">        {</span><br><span class="line">            Message = message</span><br><span class="line">        }, Context.User.Identity.GetUserId());</span><br><span class="line">        Clients.All.receiveMessage(JsonConvert.SerializeObject(chat));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="建立HubProxy"><a href="#建立HubProxy" class="headerlink" title="建立HubProxy"></a>建立HubProxy</h3><p>在網頁載入完成後，使用HubProxy並指定Hub網址，與其建立持續連線。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    $.connection.hub.logging = <span class="literal">true</span>;</span><br><span class="line">    chatHubProxy = $.connection.chatHub;</span><br><span class="line">    $.connection.hub.url = <span class="string">"/signalr"</span>;</span><br><span class="line">    $.connection.hub.start();</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><h3 id="使用HubProxy傳送訊息給Hub"><a href="#使用HubProxy傳送訊息給Hub" class="headerlink" title="使用HubProxy傳送訊息給Hub"></a>使用HubProxy傳送訊息給Hub</h3><p>當使用者在聊天室輸入訊息，並按下Enter鍵後，就可透過前面建立的HubProxy傳送資料給Hub。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$scope.chatInputKeyDown = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>{</span><br><span class="line">    <span class="keyword">if</span> (event.which === <span class="number">13</span>) {</span><br><span class="line">        $.connection.chatHub.server.syncMessage($scope.message);</span><br><span class="line">        event.preventDefault();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="使用HubProxy接收Hub廣播的訊息"><a href="#使用HubProxy接收Hub廣播的訊息" class="headerlink" title="使用HubProxy接收Hub廣播的訊息"></a>使用HubProxy接收Hub廣播的訊息</h3><p>Hub廣播訊息後，HubProxy理所當然地也接收到了這些資料，這時就可以將之加入於訊息中，透過Data Binding的特性更新於畫面上。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$.connection.chatHub.client.receiveMessage = <span class="function"><span class="keyword">function</span> (<span class="params">json</span>) </span>{</span><br><span class="line">    <span class="keyword">var</span> message = angular.fromJson(json);</span><br><span class="line">    $rootScope.$apply(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">        $scope.vm.chats.push(message);</span><br><span class="line">    });</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><p>下圖為使用兩個視窗開啟聊天室，並於左方發送訊息同步至另一方，這樣就輕而易舉的完成訊息同步功能了。<br><img src="demo.gif"></p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>SignalR到底有沒有解決效能問題？持續連線與廣播會不會給Server帶來更大的負擔？這些我都不知道，但目前已開發完成的聊天室運行狀況還算穩定。不管如何，這東西絕對值得一玩。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;記得很久以前也寫過一個聊天室，當時使用JS每秒向後端查詢一次訊息紀錄，藉此來達到讓所有使用者訊息同步的目的，可想而知這個查詢量是非常龐大的，奈何以前知識有限，並沒有找到更好的解決方案。但現在發現了&lt;code&gt;SignalR&lt;/code&gt;這個東西，總算是解決了多年前的一個遺憾。&lt;/p&gt;
    
    </summary>
    
    
      <category term="經驗分享" scheme="https://feifacunzai.github.io/categories/%E7%B6%93%E9%A9%97%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="C#" scheme="https://feifacunzai.github.io/tags/C/"/>
    
      <category term=".NET" scheme="https://feifacunzai.github.io/tags/NET/"/>
    
      <category term="SignalR" scheme="https://feifacunzai.github.io/tags/SignalR/"/>
    
      <category term="JS" scheme="https://feifacunzai.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>關於寫個聊天室這件事 (二)訊息紀錄</title>
    <link href="https://feifacunzai.github.io/2017/12/06/%E9%97%9C%E6%96%BC%E5%AF%AB%E5%80%8B%E8%81%8A%E5%A4%A9%E5%AE%A4%E9%80%99%E4%BB%B6%E4%BA%8B-%E4%BA%8C-%E8%A8%8A%E6%81%AF%E7%B4%80%E9%8C%84/"/>
    <id>https://feifacunzai.github.io/2017/12/06/%E9%97%9C%E6%96%BC%E5%AF%AB%E5%80%8B%E8%81%8A%E5%A4%A9%E5%AE%A4%E9%80%99%E4%BB%B6%E4%BA%8B-%E4%BA%8C-%E8%A8%8A%E6%81%AF%E7%B4%80%E9%8C%84/</id>
    <published>2017-12-06T01:49:46.000Z</published>
    <updated>2020-12-19T13:51:20.903Z</updated>
    
    <content type="html"><![CDATA[<p>聊天室要讓所有使用者收到彼此傳的訊息，可能要在DB開個資料表進行訊息紀錄，然後前端再透過Api查詢出來顯示在聊天室中，為了避免DB大量Query導致效能問題，或許還必須加入Cache機制才行。</p><a id="more"></a><h2 id="流程修改"><a href="#流程修改" class="headerlink" title="流程修改"></a>流程修改</h2><p>DB紀錄訊息、Cache優化存取速度；原本我是這麼想的，但仔細思考後決定捨棄DB，因為那些存在於DB的訊息我不會再拿來利用，可以說是一點保存的必要都沒有，於是就決定把訊息短暫的紀錄在Cache就好。<br>但總會發生例外，萬一有天我必須要將對話紀錄查詢出來時該怎麼辦呢？這時突然就想起了<code>Slack</code>，雖然免費的也有限制，卻也不失為一個優秀的中短期訊息保存方案。</p><h2 id="建立訊息類別"><a href="#建立訊息類別" class="headerlink" title="建立訊息類別"></a>建立訊息類別</h2><p>必要的屬性有唯一識別碼、訊息內容、建立者、建立時間，寫成類別後如下。</p><figure class="highlight cs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ChatsResponseModel</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Id { <span class="keyword">get</span>; <span class="keyword">set</span>; }</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Message { <span class="keyword">get</span>; <span class="keyword">set</span>; }</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> User { <span class="keyword">get</span>; <span class="keyword">set</span>; }</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Create { <span class="keyword">get</span>; <span class="keyword">set</span>; }</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">bool</span> Sce { <span class="keyword">get</span>; <span class="keyword">set</span>; }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ChatsResponseModel</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line">        Sce = <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="Cache"><a href="#Cache" class="headerlink" title="Cache"></a>Cache</h2><p>因為Cache現在還承包了原本DB該做的事情，所以相關的邏輯也必須先撰寫好才行。</p><h3 id="讀寫Cache"><a href="#讀寫Cache" class="headerlink" title="讀寫Cache"></a>讀寫Cache</h3><p>為了後續方便使用以及統一存取的處理方式，先把Read、Write的方法寫好，並暫訂訊息的保存時間為一天。</p><figure class="highlight cs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> TEntity CacheRead&lt;TEntity&gt;(<span class="keyword">string</span> cacheKey) <span class="keyword">where</span> TEntity : <span class="keyword">class</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">var</span> cacheEntity = HttpRuntime.Cache.Get(cacheKey) <span class="keyword">as</span> TEntity;</span><br><span class="line">    <span class="keyword">return</span> cacheEntity;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight cs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> CacheWrite&lt;TEntity&gt;(<span class="keyword">string</span> cacheKey, TEntity cacheEntity) <span class="keyword">where</span> TEntity : <span class="keyword">class</span></span><br><span class="line">{</span><br><span class="line">    HttpRuntime.Cache.Add(</span><br><span class="line">        cacheKey, </span><br><span class="line">        cacheEntity, </span><br><span class="line">        <span class="literal">null</span>,</span><br><span class="line">        DateTime.Now.AddDays(<span class="number">1</span>), </span><br><span class="line">        Cache.NoSlidingExpiration,</span><br><span class="line">        CacheItemPriority.High, </span><br><span class="line">        <span class="literal">null</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="讀寫Cache中的訊息"><a href="#讀寫Cache中的訊息" class="headerlink" title="讀寫Cache中的訊息"></a>讀寫Cache中的訊息</h3><p>結合剛剛提到的訊息類別，就可以簡單的使用Cache做訊息的讀寫了。</p><figure class="highlight cs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;ChatsResponseModel&gt; <span class="title">Read</span>(<span class="params"></span>)</span> {</span><br><span class="line">    <span class="keyword">var</span> chats = CacheRead&lt;List&lt;ChatsResponseModel&gt;&gt;(<span class="keyword">this</span>.CacheKey) ?? <span class="keyword">new</span> List&lt;ChatsResponseModel&gt;();</span><br><span class="line">    <span class="keyword">return</span> chats;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight cs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ChatsResponseModel <span class="title">Write</span>(<span class="params">MessageRequestModel model, <span class="keyword">string</span> userId, <span class="keyword">bool</span> sce = <span class="literal">false</span></span>)</span> {</span><br><span class="line">    <span class="keyword">var</span> chats = <span class="keyword">this</span>.Read() ?? <span class="keyword">new</span> List&lt;ChatsResponseModel&gt;();</span><br><span class="line">    <span class="keyword">var</span> newChat = <span class="keyword">new</span> ChatsResponseModel()</span><br><span class="line">    {</span><br><span class="line">        Id = Guid.NewGuid().ToString(),</span><br><span class="line">        Message = model.Message,</span><br><span class="line">        User = ApplicationDbContext.Users.FirstOrDefault(s =&gt; s.Id == userId).UserName,</span><br><span class="line">        Create = DateTime.Now.ToString(<span class="string">"H:mm:ss"</span>),</span><br><span class="line">        Sce = sce</span><br><span class="line">    };</span><br><span class="line">    chats.Add(newChat);</span><br><span class="line">    CacheWrite(<span class="keyword">this</span>.CacheKey, chats);</span><br><span class="line">    <span class="keyword">return</span> newChat;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="Api讀取訊息"><a href="#Api讀取訊息" class="headerlink" title="Api讀取訊息"></a>Api讀取訊息</h3><p>訊息讀寫既然已經處理完畢，那Api也能取得目前已有的訊息紀錄了，以下為Api的回傳結果。</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[  </span><br><span class="line">    {  </span><br><span class="line">        <span class="attr">"Id"</span>:<span class="string">"262436f5-d9ac-4192-a4f1-5021b383b926"</span>,</span><br><span class="line">        <span class="attr">"Message"</span>:<span class="string">"Hello world"</span>,</span><br><span class="line">        <span class="attr">"User"</span>:<span class="string">"test@gmail.com"</span>,</span><br><span class="line">        <span class="attr">"Create"</span>:<span class="string">"9:40:13"</span>,</span><br><span class="line">        <span class="attr">"Sce"</span>:<span class="literal">false</span></span><br><span class="line">    },</span><br><span class="line">    {  </span><br><span class="line">        <span class="attr">"Id"</span>:<span class="string">"de5d1bbb-903c-4bbf-ac7d-a2582d4a8f82"</span>,</span><br><span class="line">        <span class="attr">"Message"</span>:<span class="string">"測試"</span>,</span><br><span class="line">        <span class="attr">"User"</span>:<span class="string">"test@gmail.com"</span>,</span><br><span class="line">        <span class="attr">"Create"</span>:<span class="string">"9:40:22"</span>,</span><br><span class="line">        <span class="attr">"Sce"</span>:<span class="literal">false</span></span><br><span class="line">    }</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure><h2 id="Slack"><a href="#Slack" class="headerlink" title="Slack"></a>Slack</h2><p>推薦看<a href="https://api.slack.com/" target="_blank" rel="noopener">Slack Api</a>，除了整體風格我很喜歡外，寫得也很清楚、測試也很好用，看完後直接使用Web Api，在聊天室接收到訊息時順便轉傳Slack作儲存之用。</p><h3 id="實作Post-Message方法"><a href="#實作Post-Message方法" class="headerlink" title="實作Post Message方法"></a>實作Post Message方法</h3><p>撰寫一個方法，收聊天室之訊息與使用者名稱，並填入至Slack Api所需要的參數中。</p><figure class="highlight cs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SlackPostMessage</span>(<span class="params"><span class="keyword">string</span> message, <span class="keyword">string</span> name</span>)</span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">var</span> pureMsg = SanitizeHtml(message);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">string</span>.IsNullOrEmpty(pureMsg))</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">var</span> url = <span class="string">$"https://slack.com/api/chat.postMessage?token=<span class="subst">{<span class="keyword">this</span>.token}</span>&amp;channel=<span class="subst">{<span class="keyword">this</span>.channel}</span>&amp;text=<span class="subst">{pureMsg}</span>&amp;username=<span class="subst">{name}</span>"</span>;</span><br><span class="line">        <span class="keyword">var</span> client = <span class="keyword">new</span> RestClient(url);</span><br><span class="line">        <span class="keyword">var</span> request = <span class="keyword">new</span> RestRequest(Method.GET);</span><br><span class="line">        client.ExecuteTaskAsync(request);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p>下圖為同時開啟聊天室與Slack，已經可以看到Slack會幫聊天室備份訊息紀錄了。<br><img src="demo.gif"></p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>聊天室已經完成存取訊息(Cache)和查詢紀錄(Slack)的功能了，少了DB設計起來就是快，雖然存在著一些致命的硬傷，但我不說<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f608.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f608.png?v8">😈</span>；如果大家有更好的處理方式的話，不妨分享給我吧！</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;聊天室要讓所有使用者收到彼此傳的訊息，可能要在DB開個資料表進行訊息紀錄，然後前端再透過Api查詢出來顯示在聊天室中，為了避免DB大量Query導致效能問題，或許還必須加入Cache機制才行。&lt;/p&gt;
    
    </summary>
    
    
      <category term="經驗分享" scheme="https://feifacunzai.github.io/categories/%E7%B6%93%E9%A9%97%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="C#" scheme="https://feifacunzai.github.io/tags/C/"/>
    
      <category term=".NET" scheme="https://feifacunzai.github.io/tags/NET/"/>
    
  </entry>
  
  <entry>
    <title>關於寫個聊天室這件事 (一)會員系統</title>
    <link href="https://feifacunzai.github.io/2017/11/28/%E9%97%9C%E6%96%BC%E5%AF%AB%E5%80%8B%E8%81%8A%E5%A4%A9%E5%AE%A4%E9%80%99%E4%BB%B6%E4%BA%8B-%E4%B8%80-%E6%9C%83%E5%93%A1%E7%B3%BB%E7%B5%B1/"/>
    <id>https://feifacunzai.github.io/2017/11/28/%E9%97%9C%E6%96%BC%E5%AF%AB%E5%80%8B%E8%81%8A%E5%A4%A9%E5%AE%A4%E9%80%99%E4%BB%B6%E4%BA%8B-%E4%B8%80-%E6%9C%83%E5%93%A1%E7%B3%BB%E7%B5%B1/</id>
    <published>2017-11-28T09:11:32.000Z</published>
    <updated>2020-12-19T13:51:20.891Z</updated>
    
    <content type="html"><![CDATA[<p>一年前我利用閒暇時間開發了公司內部小團體用的聊天室(玩具性質)，並一直持續的維護與改善到現在，也由於是一年前的專案，所以在參考文章內所提及的資料時，還請搭配Google佐證；本系列文章依舊是在分享思路，並紀錄此聊天室的成長過程。</p><a id="more"></a><h2 id="注意事項"><a href="#注意事項" class="headerlink" title="注意事項"></a>注意事項</h2><p>本文基於<code>Visual Studio 2015</code>與<code>AspNet.Mvc5</code>撰寫，因為後來在2017建立範本專案時，找不到下面文章所提到的會員系統頁面了，並且各種後端程式語言的差異較大，還用到了一些框架提供的Scaffold，所以在這特別提一下。</p><h2 id="會員系統"><a href="#會員系統" class="headerlink" title="會員系統"></a>會員系統</h2><p>要能夠讓使用者在聊天室中識別彼此的身分，會員制是不可或缺的。因為此專案的需求相對簡單，所以直接使用範本專案的<code>ASP.NET Identity</code>會員機制就可以了，這樣也同時完成了註冊、登入、登出、忘記密碼…等麻煩的功能。</p><h3 id="建置資料庫"><a href="#建置資料庫" class="headerlink" title="建置資料庫"></a>建置資料庫</h3><p>會員系統需要什麼資料表？這些我們可以統統不考慮，因為全部都在套件提供的<code>IdentityDbContext</code>裡面，但之後我們也有可能會加入自己的資料表，所以必須自己實作一個DbContext來繼承IdentityDbContext。</p><figure class="highlight cs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class ApplicationDbContext : IdentityDbContext&lt;ApplicationUser&gt;</span><br><span class="line">{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ApplicationDbContext</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        : <span class="title">base</span>(<span class="params"><span class="string">"Web.Conn"</span>, throwIfV1Schema: <span class="literal">false</span></span>)</span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ApplicationDbContext <span class="title">Create</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApplicationDbContext();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>接下來使用<code>Code First</code>布署DB，就可以看到會員系統所需的相關資料表都建好了，理論上在這時，我們範本專案的會員系統頁面也可以正常運作了。<br><img src="identity-table.jpg"></p><h3 id="密碼驗證"><a href="#密碼驗證" class="headerlink" title="密碼驗證"></a>密碼驗證</h3><p>ASP.NET Identity雖然便利，但註冊時的預設密碼驗證卻相當嚴謹，居然需要大小寫、特殊符號、英數字、長度限制，這也導致了使用者註冊完後常常會忘記自己的密碼，如果大家不介意的話，就像我一樣把驗證拔光光吧。</p><figure class="highlight cs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">UserManager.PasswordValidator = <span class="keyword">new</span> PasswordValidator</span><br><span class="line">{</span><br><span class="line">    RequiredLength = <span class="number">6</span>,</span><br><span class="line">    RequireNonLetterOrDigit = <span class="literal">false</span>,</span><br><span class="line">    RequireDigit = <span class="literal">false</span>,</span><br><span class="line">    RequireLowercase = <span class="literal">false</span>,</span><br><span class="line">    RequireUppercase = <span class="literal">false</span>,</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><h3 id="重置密碼"><a href="#重置密碼" class="headerlink" title="重置密碼"></a>重置密碼</h3><p>重置密碼需要串接Email來寄送重置連結給使用者，使用者收信後再透過連結重置密碼；雖然我覺得這沒什麼問題，但同事們覺得麻煩，討論過後就改成了輸入Email與使用者名稱可直接導向重置連結，這也造成了被他人重置密碼的可能性，不過大家都是自己人，於是我也就這麼做了。</p><figure class="highlight cs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ForgotPasswordViewModel</span></span><br><span class="line">{</span><br><span class="line">    [<span class="meta">Required</span>]</span><br><span class="line">    [<span class="meta">EmailAddress</span>]</span><br><span class="line">    [<span class="meta">Display(Name = <span class="meta-string">"電子郵件"</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Email { <span class="keyword">get</span>; <span class="keyword">set</span>; }</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Required</span>]</span><br><span class="line">    [<span class="meta">Display(Name = <span class="meta-string">"使用者名稱"</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Name { <span class="keyword">get</span>; <span class="keyword">set</span>; }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight cs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">HttpPost</span>]</span><br><span class="line">[<span class="meta">AllowAnonymous</span>]</span><br><span class="line">[<span class="meta">ValidateAntiForgeryToken</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;ActionResult&gt; <span class="title">ForgotPassword</span>(<span class="params">ForgotPasswordViewModel model</span>)</span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span> (ModelState.IsValid)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">var</span> user = UserManager.FindByEmail(model.Email);</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span> || user.UserName != model.Name)</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">return</span> View(<span class="string">"ForgotPasswordConfirmation"</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">string</span> code = <span class="keyword">await</span> UserManager.GeneratePasswordResetTokenAsync(user.Id);</span><br><span class="line">        <span class="keyword">var</span> callbackUrl = Url.Action(<span class="string">"ResetPassword"</span>, <span class="string">"Account"</span>, <span class="keyword">new</span> { userId = user.Id, code = code }, protocol: Request.Url.Scheme);</span><br><span class="line">        <span class="keyword">return</span> Redirect(callbackUrl);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> View(model);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><p>可以從下面的Gif中看到登入、註冊、登出的操作情境，畫面跟範本專案比起來當然是有稍微調整過的，這在後續章節才會提到。<br><img src="demo.gif"></p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>聊天室所需要的會員系統就這樣完成了，雖然ASP.NET Identity還有很多的潛力可以發掘，但我這次用不到，就放到以後有機會再來研究吧！</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一年前我利用閒暇時間開發了公司內部小團體用的聊天室(玩具性質)，並一直持續的維護與改善到現在，也由於是一年前的專案，所以在參考文章內所提及的資料時，還請搭配Google佐證；本系列文章依舊是在分享思路，並紀錄此聊天室的成長過程。&lt;/p&gt;
    
    </summary>
    
    
      <category term="經驗分享" scheme="https://feifacunzai.github.io/categories/%E7%B6%93%E9%A9%97%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="C#" scheme="https://feifacunzai.github.io/tags/C/"/>
    
      <category term=".NET" scheme="https://feifacunzai.github.io/tags/NET/"/>
    
  </entry>
  
  <entry>
    <title>學習Python順便造個呼之即來揮之即去的LineBot (二)</title>
    <link href="https://feifacunzai.github.io/2017/11/06/%E5%AD%B8%E7%BF%92Python%E9%A0%86%E4%BE%BF%E9%80%A0%E5%80%8B%E5%91%BC%E4%B9%8B%E5%8D%B3%E4%BE%86%E6%8F%AE%E4%B9%8B%E5%8D%B3%E5%8E%BB%E7%9A%84LineBot-%E4%BA%8C/"/>
    <id>https://feifacunzai.github.io/2017/11/06/%E5%AD%B8%E7%BF%92Python%E9%A0%86%E4%BE%BF%E9%80%A0%E5%80%8B%E5%91%BC%E4%B9%8B%E5%8D%B3%E4%BE%86%E6%8F%AE%E4%B9%8B%E5%8D%B3%E5%8E%BB%E7%9A%84LineBot-%E4%BA%8C/</id>
    <published>2017-11-06T08:22:58.000Z</published>
    <updated>2020-12-19T13:51:20.751Z</updated>
    
    <content type="html"><![CDATA[<p>不知道大家有沒有遇過這個情況，被加入群組的Bot不管什麼話都要接一下，實在是讓人煩不甚煩，難道就不能我叫它時它再出現嗎？本篇文章就來玩一下LineBot，順便嘗試解決這個問題。</p><a id="more"></a><h2 id="事前準備"><a href="#事前準備" class="headerlink" title="事前準備"></a>事前準備</h2><p>開始寫程式前當然是要先把開發環境建置好，讓LineBot可以順利連到自己的站台，這樣就事半功倍啦！</p><h3 id="Messaging-API"><a href="#Messaging-API" class="headerlink" title="Messaging API"></a>Messaging API</h3><p>申請Line開發者帳號後，建立一個<code>Messaging API</code>，未來不排除會使用到推送訊息功能，所以我這邊選擇開發者試用計畫。<br><img src="plan.jpg"></p><p>將Webhook URL填入自己撰寫的Web API網址，開發時可填入本機IP，完成後推上Server再於此處修改(我這邊使用Heroku)。<br><img src="webhook.jpg"></p><p>設定允許機器人加入群組。<br><img src="allow_group.jpg"></p><h3 id="安裝SDK"><a href="#安裝SDK" class="headerlink" title="安裝SDK"></a>安裝SDK</h3><p>官方列出了各種語言的<a href="https://developers.line.me/en/docs/messaging-api/line-bot-sdk/" target="_blank" rel="noopener">開發工具包</a>，沒列在官方的也可以在Github上找到，像我自己平時是寫.NET，官方居然沒有列，可…可惡；回歸正傳，SDK大大減化了開發流程，依據本篇主題，這裡就使用pip把官方推薦的<a href="https://github.com/line/line-bot-sdk-python" target="_blank" rel="noopener">line-bot-sdk</a>裝起來。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install line-bot-sdk</span><br></pre></td></tr></tbody></table></figure><h3 id="測試Web-API"><a href="#測試Web-API" class="headerlink" title="測試Web API"></a>測試Web API</h3><p>把SDK的使用說明看一看，要讓Bot與API溝通應該不是件難事，這裡讓Bot回傳使用者輸入的訊息後，下一步就可以正式開始寫邏輯啦！<br><img src="test.gif"></p><h2 id="呼之即來揮之即去功能"><a href="#呼之即來揮之即去功能" class="headerlink" title="呼之即來揮之即去功能"></a>呼之即來揮之即去功能</h2><p>思路大概是這樣子的，Bot預設是不回應請求的，當使用者輸入關鍵字後會啟動Bot，也可輸入關鍵字後關閉Bot，或是於五分鐘後Bot自動關閉。下圖畫的有點醜，大概明白就好。<br><img src="logic.jpg"></p><h3 id="建立機器人狀態表"><a href="#建立機器人狀態表" class="headerlink" title="建立機器人狀態表"></a>建立機器人狀態表</h3><p>因為後端需要判斷Bot所在的群組是否需要回覆訊息，以及目前Bot的狀態，所以這張表需要紀錄的欄位是Line的群組ID、過期時間、建立時間，程式碼大致如下。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GroupTicket</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    groupId = models.CharField(max_length=<span class="number">35</span>)</span><br><span class="line">    expire = models.DateTimeField(null=<span class="literal">True</span>)</span><br><span class="line">    createDate = models.DateTimeField()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">createByGroupId</span><span class="params">(groupId)</span>:</span></span><br><span class="line">        GroupTicket.objects.filter(groupId=groupId).delete()</span><br><span class="line">        groupTicket = GroupTicket(</span><br><span class="line">            groupId = groupId,</span><br><span class="line">            expire = timezone.now() + timedelta(minutes = <span class="number">5</span>),</span><br><span class="line">            createDate = timezone.now()</span><br><span class="line">        )</span><br><span class="line">        groupTicket.save()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isExpireByGroupId</span><span class="params">(groupId)</span>:</span></span><br><span class="line">        groupTickets = GroupTicket.objects.filter(groupId=groupId)</span><br><span class="line">        <span class="keyword">if</span> groupTickets.exists() == <span class="literal">False</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        groupTicket = groupTickets[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">return</span> timezone.now() &lt; groupTicket.expire</span><br></pre></td></tr></tbody></table></figure><h3 id="建立喚醒與關閉的邏輯判斷"><a href="#建立喚醒與關閉的邏輯判斷" class="headerlink" title="建立喚醒與關閉的邏輯判斷"></a>建立喚醒與關閉的邏輯判斷</h3><p>我希望後端在接收到特定關鍵字時能夠有相對應的特殊處理，所以在這裡撰寫程式對<code>機器人出來</code>為喚醒，<code>機器人再見</code>為關閉的條件判斷，並新增或刪除上述的<code>GroupTicket</code>狀態資料，若處在喚醒狀態時，才回傳訊息。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> event.source.type == <span class="string">'group'</span> <span class="keyword">and</span> event.message.text == <span class="string">'機器人出來'</span>:</span><br><span class="line">    GroupTicket.createByGroupId(event.source.group_id)</span><br><span class="line">    Line.replyMessage(event, <span class="string">'我來了'</span>)</span><br><span class="line"><span class="keyword">elif</span> event.source.type == <span class="string">'group'</span> <span class="keyword">and</span> event.message.text == <span class="string">'機器人再見'</span>:</span><br><span class="line">    GroupTicket.objects.filter(groupId=event.source.group_id).delete()</span><br><span class="line">    Line.replyMessage(event, <span class="string">'我走了'</span>)</span><br><span class="line"><span class="keyword">elif</span> (event.source.type == <span class="string">'group'</span> <span class="keyword">and</span> GroupTicket.isExpireByGroupId(event.source.group_id)):</span><br><span class="line">    Line.replyMessage(event, event.message.text)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse()</span><br></pre></td></tr></tbody></table></figure><h3 id="執行結果"><a href="#執行結果" class="headerlink" title="執行結果"></a>執行結果</h3><p>現在Bot的開關已經生效，不把它喚醒的話它就只會乖乖地安靜，這樣Bot是不是更好用了呢？<br><img src="demo.gif"></p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>這次的學習Python計劃算是蠻成功的，除了兩篇文章內所提及的東西外還學了很多，例如<code>APIAI</code>做語意分析、<code>Migrate</code>佈署DB，除此之外還嘗試串接了公司內的員工打卡服務，點子雖然源源不絕，但奈何時間有限，就決定到此告一段落，Python 我們下次再見。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不知道大家有沒有遇過這個情況，被加入群組的Bot不管什麼話都要接一下，實在是讓人煩不甚煩，難道就不能我叫它時它再出現嗎？本篇文章就來玩一下LineBot，順便嘗試解決這個問題。&lt;/p&gt;
    
    </summary>
    
    
      <category term="學習心得" scheme="https://feifacunzai.github.io/categories/%E5%AD%B8%E7%BF%92%E5%BF%83%E5%BE%97/"/>
    
    
      <category term="Bot" scheme="https://feifacunzai.github.io/tags/Bot/"/>
    
      <category term="Python" scheme="https://feifacunzai.github.io/tags/Python/"/>
    
      <category term="Django" scheme="https://feifacunzai.github.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>學習Python順便造個呼之即來揮之即去的LineBot (一)</title>
    <link href="https://feifacunzai.github.io/2017/11/02/%E5%AD%B8%E7%BF%92Python%E9%A0%86%E4%BE%BF%E9%80%A0%E5%80%8B%E5%91%BC%E4%B9%8B%E5%8D%B3%E4%BE%86%E6%8F%AE%E4%B9%8B%E5%8D%B3%E5%8E%BB%E7%9A%84LineBot-%E4%B8%80/"/>
    <id>https://feifacunzai.github.io/2017/11/02/%E5%AD%B8%E7%BF%92Python%E9%A0%86%E4%BE%BF%E9%80%A0%E5%80%8B%E5%91%BC%E4%B9%8B%E5%8D%B3%E4%BE%86%E6%8F%AE%E4%B9%8B%E5%8D%B3%E5%8E%BB%E7%9A%84LineBot-%E4%B8%80/</id>
    <published>2017-11-02T02:15:47.000Z</published>
    <updated>2020-12-19T13:51:20.749Z</updated>
    
    <content type="html"><![CDATA[<p>看到一篇報導指出「2017最受歡迎人工智能編程語言：Python第一」，我心中也是對Python傾慕已久，就趁著這個機會來玩玩Python這門程式語言吧！本篇文章紀錄從零開始學習Python的隨手筆記。</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><p>既然是從零開始，當然是從<a href="https://www.python.org/" target="_blank" rel="noopener">官方網站</a>看起，先把該裝的東西裝起來，看一下基礎語法如何撰寫，做個如何架站的功課…等。</p><h3 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h3><p>目前主流版本似乎是2與3，並且各自都有大量的擁護者，官方還列出了一份詳細的<a href="https://wiki.python.org/moin/Python2orPython3" target="_blank" rel="noopener">比較文件</a>，但我只是來學習的，沒有興趣去搞懂為何會有這種分歧，索性就直接安裝最新版吧！(3.6.3)</p><h3 id="語法"><a href="#語法" class="headerlink" title="語法"></a>語法</h3><p>除了官方網站外，同事還推薦了個學習網站<a href="https://www.codecademy.com/" target="_blank" rel="noopener">「codecademy」</a>，裡面有豐富的教學與測驗讓使用者快速學習一門程式語言，嗯…最終進度停在了9%，未來看有沒有機會把它補完，現階段我就先邊做邊學就好<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/263a.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/263a.png?v8">☺</span><br><img src="codecademy.jpg"></p><h3 id="架站"><a href="#架站" class="headerlink" title="架站"></a>架站</h3><p>找到了兩款不錯的Framework，分別是<code>Django</code>、<code>Flask</code>；Django快速開發、Flask輕量，都有各自的優點，最後我選擇了Django，原因是怕Flask太輕量讓我無法快速上手，Flask我們有緣下次再見<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f61d.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f61d.png?v8">😝</span></p><h2 id="Django"><a href="#Django" class="headerlink" title="Django"></a>Django</h2><p>這裡我偷了一個懶，因為此服務預計會上<code>Heroku</code>，然後又在Heroku看到了配置好的<a href="https://devcenter.heroku.com/articles/getting-started-with-python#prepare-the-app" target="_blank" rel="noopener">專案範本</a>，於是就這麼用了，當然你也可以在<a href="https://www.djangoproject.com/" target="_blank" rel="noopener">「Django」</a>自己從頭開始，差別應該是不大吧(我猜)，Heroku範本如下。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/heroku/python-getting-started.git</span><br><span class="line">$ <span class="built_in">cd</span> python-getting-started</span><br></pre></td></tr></tbody></table></figure><h3 id="上手指南"><a href="#上手指南" class="headerlink" title="上手指南"></a>上手指南</h3><p>大概列一下自己的學習順序：</p><ul><li>瞭解預設專案內每個資料夾的用途與內部檔案的作用。</li><li>挑幾篇官方的<a href="https://docs.djangoproject.com/en/1.11/" target="_blank" rel="noopener">Guide</a>與網路上找中文資料對照看。</li><li>過程中任意修改程式來驗證所看到的教程。</li><li>訂定學習目標並在過程中逐步完成它(呼之即來揮之即去的LineBot)。</li></ul><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>不知道這篇文章會不會水分過多，因為我只記錄了過程中自己的大略思路與執行方向而已，但就我自己而言上手Python真的不難(有一點點程式底子)，大家也可以來玩玩看，嗯…晚點再來寫Bot實作篇。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;看到一篇報導指出「2017最受歡迎人工智能編程語言：Python第一」，我心中也是對Python傾慕已久，就趁著這個機會來玩玩Python這門程式語言吧！本篇文章紀錄從零開始學習Python的隨手筆記。&lt;/p&gt;
    
    </summary>
    
    
      <category term="學習心得" scheme="https://feifacunzai.github.io/categories/%E5%AD%B8%E7%BF%92%E5%BF%83%E5%BE%97/"/>
    
    
      <category term="Bot" scheme="https://feifacunzai.github.io/tags/Bot/"/>
    
      <category term="Python" scheme="https://feifacunzai.github.io/tags/Python/"/>
    
      <category term="Django" scheme="https://feifacunzai.github.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Ionic使用AdminLTE美化</title>
    <link href="https://feifacunzai.github.io/2017/10/20/Ionic%E4%BD%BF%E7%94%A8AdminLTE%E7%BE%8E%E5%8C%96/"/>
    <id>https://feifacunzai.github.io/2017/10/20/Ionic%E4%BD%BF%E7%94%A8AdminLTE%E7%BE%8E%E5%8C%96/</id>
    <published>2017-10-20T03:20:44.000Z</published>
    <updated>2020-12-19T13:51:20.715Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://ionicframework.com/" target="_blank" rel="noopener">「Ionic」</a>真是個快速開發App的好東西，但如果想讓UI有特色一點真的是需要費很大的功夫，我本身前端設計能力又非常淺薄，這時就要想辦法靠套版來解決問題了。本篇文章選擇使用開源且免費的<a href="https://adminlte.io/" target="_blank" rel="noopener">AdminLTE</a>進行App美化實驗，最終希望能讓UI更豐富一點。</p><a id="more"></a><h2 id="開發環境"><a href="#開發環境" class="headerlink" title="開發環境"></a>開發環境</h2><p>本專案是還在開發中的App，功能大概是企業內部GPS打卡、提醒、查詢紀錄，這些功能理論上不影響本次實驗。</p><h3 id="Ionic-Info"><a href="#Ionic-Info" class="headerlink" title="Ionic Info"></a>Ionic Info</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">cli packages:</span><br><span class="line">    @ionic/cli-plugin-proxy : 1.4.13</span><br><span class="line">    @ionic/cli-utils        : 1.13.1</span><br><span class="line">    ionic (Ionic CLI)       : 3.13.2</span><br><span class="line"></span><br><span class="line">global packages:</span><br><span class="line">    cordova (Cordova CLI) : 7.0.1</span><br><span class="line"></span><br><span class="line"><span class="built_in">local</span> packages:</span><br><span class="line">    @ionic/app-scripts : 2.1.4</span><br><span class="line">    Cordova Platforms  : android 6.2.3 ios 4.4.0</span><br><span class="line">    Ionic Framework    : ionic-angular 3.6.1</span><br><span class="line"></span><br><span class="line">System:</span><br><span class="line">    Node : v6.9.1</span><br><span class="line">    npm  : 3.10.8</span><br><span class="line">    OS   : Windows 7</span><br><span class="line"></span><br><span class="line">Misc:</span><br><span class="line">    backend : legacy</span><br></pre></td></tr></tbody></table></figure><h3 id="AdminLTE"><a href="#AdminLTE" class="headerlink" title="AdminLTE"></a>AdminLTE</h3><p>這裡使用版本<code>2.4.2</code>，共會用到兩個Css，分別是<code>AdminLTE.min.css</code>和<code>_all-skins.min.css</code>，將它們加入網頁參考，要特別注意的是AdminLTE是相依於Bootstrap的，但Ionic與Bootstrap會激烈衝突，所以在這裡不用Bootstrap。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"assets/css/AdminLTE.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"assets/css/_all-skins.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="美化"><a href="#美化" class="headerlink" title="美化"></a>美化</h2><p>美化時盡量使用<code>Ionic Component</code>取代AdminLTE元件，配色選擇為<code>skin-blue</code>。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span>=<span class="string">"skin-blue"</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="Navbar"><a href="#Navbar" class="headerlink" title="Navbar"></a>Navbar</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ion-header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">"main-header navbar"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"logo"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ion-title</span>&gt;</span>選單<span class="tag">&lt;/<span class="name">ion-title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ion-header</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main-header</span> <span class="selector-class">.logo</span> {</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">44px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">44px</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="修改結果"><a href="#修改結果" class="headerlink" title="修改結果"></a>修改結果</h4><p><img src="navbar.jpg"></p><h3 id="Menu"><a href="#Menu" class="headerlink" title="Menu"></a>Menu</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ion-list</span> <span class="attr">class</span>=<span class="string">"main-sidebar"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"sidebar"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"sidebar-menu tree"</span> <span class="attr">data-widget</span>=<span class="string">"tree"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span>MAIN NAVIGATION<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">tappable</span> <span class="attr">menuClose</span> *<span class="attr">ngFor</span>=<span class="string">"let p of pages"</span> (<span class="attr">tap</span>)=<span class="string">"openPage(p)"</span> [<span class="attr">ngClass</span>]=<span class="string">"p.active ? 'active' : 'treeview'"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">ion-label</span> <span class="attr">item-end</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">ion-icon</span> <span class="attr">name</span>=<span class="string">"{{p.icon}}"</span>&gt;</span><span class="tag">&lt;/<span class="name">ion-icon</span>&gt;</span></span><br><span class="line">                        {{p.title}}</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">ion-label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ion-list</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main-sidebar</span> {</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: initial;</span><br><span class="line">    <span class="attribute">transform</span>: initial;</span><br><span class="line">    <span class="attribute">padding-top</span>: initial;</span><br><span class="line">    <span class="attribute">position</span>: initial;</span><br><span class="line">    <span class="attribute">min-height</span>: initial;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.menu-inner</span> <span class="selector-class">.list-ios</span>, <span class="selector-class">.menu-inner</span> <span class="selector-class">.list</span> {</span><br><span class="line">    <span class="attribute">margin</span>: initial;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">100%</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.menu-inner</span> <span class="selector-class">.label</span> {</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.7rem</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="修改結果-1"><a href="#修改結果-1" class="headerlink" title="修改結果"></a>修改結果</h4><p><img src="menu.jpg"></p><h3 id="Timeline"><a href="#Timeline" class="headerlink" title="Timeline"></a>Timeline</h3><blockquote><p><a href="https://adminlte.io/themes/AdminLTE/pages/UI/timeline.html" target="_blank" rel="noopener">https://adminlte.io/themes/AdminLTE/pages/UI/timeline.html</a></p></blockquote><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.timeline</span> {</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.timeline</span> &gt; <span class="selector-tag">li</span><span class="selector-pseudo">:last-child</span> {</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.timeline</span> &gt; <span class="selector-tag">li</span><span class="selector-pseudo">:last-child</span> <span class="selector-class">.timeline-footer</span> {</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="修改結果-2"><a href="#修改結果-2" class="headerlink" title="修改結果"></a>修改結果</h4><p><img src="timeline.jpg"></p><h3 id="Login"><a href="#Login" class="headerlink" title="Login"></a>Login</h3><blockquote><p><a href="https://adminlte.io/themes/AdminLTE/pages/examples/login.html" target="_blank" rel="noopener">https://adminlte.io/themes/AdminLTE/pages/examples/login.html</a></p></blockquote><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.content</span> {</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">'/img/login.jpg'</span>);</span><br><span class="line">    <span class="attribute">background-repeat</span>: round;</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.login-page</span> {</span><br><span class="line">    <span class="attribute">background</span>: initial;</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.login-box-msg</span> {</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.login-box-body</span> {</span><br><span class="line">    <span class="attribute">background</span>: initial;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="修改結果-3"><a href="#修改結果-3" class="headerlink" title="修改結果"></a>修改結果</h4><p><img src="login.jpg"></p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>過程中遇到很多Ionic與AdminLTE的Css衝突問題，目前只能遇到一個解一個，或許還有更好的套版方法？</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://ionicframework.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;「Ionic」&lt;/a&gt;真是個快速開發App的好東西，但如果想讓UI有特色一點真的是需要費很大的功夫，我本身前端設計能力又非常淺薄，這時就要想辦法靠套版來解決問題了。本篇文章選擇使用開源且免費的&lt;a href=&quot;https://adminlte.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;AdminLTE&lt;/a&gt;進行App美化實驗，最終希望能讓UI更豐富一點。&lt;/p&gt;
    
    </summary>
    
    
      <category term="網頁設計" scheme="https://feifacunzai.github.io/categories/%E7%B6%B2%E9%A0%81%E8%A8%AD%E8%A8%88/"/>
    
    
      <category term="Ionic" scheme="https://feifacunzai.github.io/tags/Ionic/"/>
    
      <category term="App" scheme="https://feifacunzai.github.io/tags/App/"/>
    
      <category term="Css" scheme="https://feifacunzai.github.io/tags/Css/"/>
    
  </entry>
  
  <entry>
    <title>C#實作GraphQL API</title>
    <link href="https://feifacunzai.github.io/2017/10/17/C-%E5%AF%A6%E4%BD%9CGraphQL-API/"/>
    <id>https://feifacunzai.github.io/2017/10/17/C-%E5%AF%A6%E4%BD%9CGraphQL-API/</id>
    <published>2017-10-17T09:32:36.000Z</published>
    <updated>2020-12-19T13:51:20.524Z</updated>
    
    <content type="html"><![CDATA[<p>聽說「<a href="http://graphql.org/" target="_blank" rel="noopener">GraphQL</a>」解決了RESTful的各種問題，而且還是大名鼎鼎的Facebook出品，這篇文章就來實際搞玩看看，使用我現有的Web服務之DB套上GraphQL，並實作API，看看能不能迸出什麼火花<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f4a5.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a5.png?v8">💥</span></p><a id="more"></a><h2 id="GraphQL簡介"><a href="#GraphQL簡介" class="headerlink" title="GraphQL簡介"></a>GraphQL簡介</h2><p>從官方看起來應該就是<code>API的Query語言</code>，特色是擁有非常強大的<code>查詢</code>功能。</p><h2 id="在-NET、C-實現GraphQL"><a href="#在-NET、C-實現GraphQL" class="headerlink" title="在.NET、C#實現GraphQL"></a>在.NET、C#實現GraphQL</h2><p>多數不同的程式語言都已經有人實現了<a href="http://graphql.org/code/" target="_blank" rel="noopener">GraphQL Library</a>，.NET在官方網站上共列出了兩個，這裡就挑其中一個較符合本篇主題的類別庫來做測試。</p><blockquote><p><a href="https://github.com/ckimes89/graphql-net" target="_blank" rel="noopener">graphql-net</a>: Convert GraphQL to IQueryable</p></blockquote><h3 id="使用Nuget安裝套件"><a href="#使用Nuget安裝套件" class="headerlink" title="使用Nuget安裝套件"></a>使用Nuget安裝套件</h3><p><img src="install.jpg"></p><h3 id="建立GraphQL-API-Controller"><a href="#建立GraphQL-API-Controller" class="headerlink" title="建立GraphQL API Controller"></a>建立GraphQL API Controller</h3><figure class="highlight cs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">GqlController</span> : <span class="title">ApiController</span></span><br><span class="line">{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GqlController</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="建立Schema"><a href="#建立Schema" class="headerlink" title="建立Schema"></a>建立Schema</h3><p>在此套件中，想用GraphQL獨有的Query對DB做存取，需要先將原有的DbContext轉成Schema。</p><figure class="highlight cs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Schema = GraphQL&lt;ApplicationDbContext&gt;.CreateDefaultSchema(() =&gt; <span class="keyword">new</span> ApplicationDbContext());</span><br></pre></td></tr></tbody></table></figure><h3 id="建立Schema-Type"><a href="#建立Schema-Type" class="headerlink" title="建立Schema Type"></a>建立Schema Type</h3><p>依照實務需求或安全性考量，<code>資料庫中的特定資料表</code>或<code>資料表內的特定欄位</code>是不允許被查詢後顯示的，這時可以使用<code>Schema.AddType&lt;T&gt;()</code>定義允許的資料表，與使用<code>AddField()</code>定義允許的欄位，但本篇練習沒這層考量，所以我在這直接使用<code>Schema.AddType&lt;T&gt;().AddAllFields()</code>直接允許所有欄位；以下共添加三張資料表，分別是影片表<code>VideoTable</code>、標籤表<code>TagTable</code>、影片標籤關係表<code>TagRelationTable</code>。</p><figure class="highlight cs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Schema.AddType&lt;VideoTable&gt;().AddAllFields();</span><br><span class="line">Schema.AddType&lt;TagTable&gt;().AddAllFields();</span><br><span class="line">Schema.AddType&lt;TagRelationTable&gt;().AddAllFields();</span><br></pre></td></tr></tbody></table></figure><h3 id="建立Schema-Field"><a href="#建立Schema-Field" class="headerlink" title="建立Schema Field"></a>建立Schema Field</h3><p>定義GraphQL API傳遞給後端的Query，下面分別是查詢影片與查詢標籤，如果沒有定義的話是會出現SchemaRoot錯誤的喔。</p><figure class="highlight cs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Schema.AddListField(<span class="string">"videos"</span>, db =&gt; db.Videos);</span><br><span class="line">Schema.AddListField(<span class="string">"tags"</span>, db =&gt; db.Tags);</span><br></pre></td></tr></tbody></table></figure><h3 id="完成基礎設置"><a href="#完成基礎設置" class="headerlink" title="完成基礎設置"></a>完成基礎設置</h3><figure class="highlight cs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Schema.Complete();</span><br><span class="line">Gql = <span class="keyword">new</span> GraphQL&lt;ApplicationDbContext&gt;(Schema);</span><br></pre></td></tr></tbody></table></figure><h3 id="建立Controller-Action"><a href="#建立Controller-Action" class="headerlink" title="建立Controller Action"></a>建立Controller Action</h3><p>後端要寫的東西基本上就到此為止了！只要將傳入的Query使用<code>ExecuteQuery()</code>執行，就可以得到查詢結果了，所以說，要建一個GraphQL API一點都不難呢<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f601.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f601.png?v8">😁</span></p><figure class="highlight cs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">object</span> <span class="title">Query</span>(<span class="params"></span>)</span> {</span><br><span class="line">    <span class="keyword">var</span> requestContent = Request.Content.ReadAsStringAsync().Result;</span><br><span class="line">    <span class="keyword">var</span> query = JsonConvert.DeserializeObject&lt;GqlQueryModel&gt;(requestContent).query;</span><br><span class="line">    <span class="keyword">var</span> data = Gql.ExecuteQuery(query);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> { data = data };</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="測試API"><a href="#測試API" class="headerlink" title="測試API"></a>測試API</h2><p>到底它會對於我們的API有什麼幫助呢？下面我做了幾個簡單的範例，來幫助大家瞭解它如何運作。</p><h3 id="Queries"><a href="#Queries" class="headerlink" title="Queries"></a>Queries</h3><p>API使用者可以指定需要的欄位，還可以修改回傳的欄位名稱。下圖為查詢標籤表中的id、name、createDate欄位，並把createDate指定回傳名稱為create。<br><img src="query_tags.jpg"></p><p>巢狀資料也難不倒GraphQL。下圖為找出標籤下的影片，並顯示影片的name欄位。<br><img src="query_tags_relation_video.jpg"></p><p>資料分頁也是輕輕鬆鬆。下圖為找出影片，取5筆的第2頁。<br><img src="query_video_pagination.jpg"></p><p>一次搜尋多張資料表。下圖為查詢影片與標籤。<br><img src="query_multi_table.jpg"></p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>GraphQL還有許多功能，像是新增、修改、刪除的<code>Mutations</code>…等，但我現階段查閱資料，發現套件的支援度還不是太完整，希望未來有機會可以再對這篇文章進行補充，但以目前的查詢功能來說，是不是已經可以達到減少客製化API的需求、讓API使用者更彈性的對DB進行Query了呢，你也一起來玩玩看吧<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f618.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f618.png?v8">😘</span></p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="http://graphql.org/" target="_blank" rel="noopener">GraphQL</a><br><a href="https://www.howtographql.com/" target="_blank" rel="noopener">HOW TO GRAPHQL</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;聽說「&lt;a href=&quot;http://graphql.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GraphQL&lt;/a&gt;」解決了RESTful的各種問題，而且還是大名鼎鼎的Facebook出品，這篇文章就來實際搞玩看看，使用我現有的Web服務之DB套上GraphQL，並實作API，看看能不能迸出什麼火花&lt;span class=&quot;github-emoji&quot; style=&quot;color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f4a5.png?v8) center/contain&quot; data-src=&quot;https://github.githubassets.com/images/icons/emoji/unicode/1f4a5.png?v8&quot;&gt;💥&lt;/span&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="學習心得" scheme="https://feifacunzai.github.io/categories/%E5%AD%B8%E7%BF%92%E5%BF%83%E5%BE%97/"/>
    
    
      <category term="C#" scheme="https://feifacunzai.github.io/tags/C/"/>
    
      <category term=".NET" scheme="https://feifacunzai.github.io/tags/NET/"/>
    
      <category term="GraphQL" scheme="https://feifacunzai.github.io/tags/GraphQL/"/>
    
  </entry>
  
  <entry>
    <title>使用Hexo架設Blog</title>
    <link href="https://feifacunzai.github.io/2017/10/11/%E4%BD%BF%E7%94%A8Hexo%E6%9E%B6%E8%A8%AD%E9%83%A8%E8%90%BD%E6%A0%BC/"/>
    <id>https://feifacunzai.github.io/2017/10/11/%E4%BD%BF%E7%94%A8Hexo%E6%9E%B6%E8%A8%AD%E9%83%A8%E8%90%BD%E6%A0%BC/</id>
    <published>2017-10-11T06:44:17.000Z</published>
    <updated>2020-12-19T13:51:20.738Z</updated>
    
    <content type="html"><![CDATA[<p>一直有在定期追蹤幾個部落客，期間發現許多部落格的版型非常相似，並且都是架設在Github Page下，於是經過調查後，找到了這麼個玩意兒「<a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>」，看完許多資料後頓時覺得，這才是程式設計師該用的部落格啊！從站台、程式、到文章，都可以在自己的掌控之下，還有比這更Geek的嗎？以下紀錄搞玩過程。</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><p>官方網站的<a href="https://hexo.io/zh-tw/docs/" target="_blank" rel="noopener">教學</a>真的簡潔明瞭，短短五行的指令就完成架設，我就喜歡這麼簡單的東西<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8">😂</span></p><h3 id="安裝並建立Hexo專案"><a href="#安裝並建立Hexo專案" class="headerlink" title="安裝並建立Hexo專案"></a>安裝並建立Hexo專案</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br><span class="line">$ hexo init demo</span><br><span class="line">$ <span class="built_in">cd</span> demo</span><br></pre></td></tr></tbody></table></figure><h3 id="在本機架設部落格站台"><a href="#在本機架設部落格站台" class="headerlink" title="在本機架設部落格站台"></a>在本機架設部落格站台</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install</span><br><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure><h3 id="用瀏覽器查看執行結果"><a href="#用瀏覽器查看執行結果" class="headerlink" title="用瀏覽器查看執行結果"></a>用瀏覽器查看執行結果</h3><p>部落格已經架設完成了，也太簡單了吧！　<br><img src="web-demo.jpg"></p><h2 id="主題"><a href="#主題" class="headerlink" title="主題"></a>主題</h2><p>要如何讓網站變得好看呢？理論上來說，程式就在自己手上，想怎麼改？就怎麼改！但可憐我前端只是個略懂略懂的人，在變強前還是套版就好了<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f60f.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f60f.png?v8">😏</span></p><h3 id="物色一個喜歡的主題"><a href="#物色一個喜歡的主題" class="headerlink" title="物色一個喜歡的主題"></a>物色一個喜歡的主題</h3><p>可以從官方網站的<a href="https://hexo.io/themes/" target="_blank" rel="noopener">主題</a>頁看到上百個主題，由於都是Open Source，不滿意也能自己進行修改，在這裡我就挑一個較多人推薦「<a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">Next</a>」進行套版。<br><img src="themes.jpg"></p><h3 id="下載主題至Hexo專案"><a href="#下載主題至Hexo專案" class="headerlink" title="下載主題至Hexo專案"></a>下載主題至Hexo專案</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir themes/next</span><br><span class="line">$ curl -s https://api.github.com/repos/iissnan/hexo-theme-next/releases/latest | grep tarball_url | cut -d <span class="string">'"'</span> -f 4 | wget -i - -O- | tar -zx -C themes/next --strip-components=1</span><br></pre></td></tr></tbody></table></figure><h3 id="修改專案設定擋"><a href="#修改專案設定擋" class="headerlink" title="修改專案設定擋"></a>修改專案設定擋</h3><p>在專案目錄下可以找到<code>_config.yml</code>，打開後找到<code>theme</code>並修改為<code>next</code>。</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></tbody></table></figure><h3 id="驗證套用結果"><a href="#驗證套用結果" class="headerlink" title="驗證套用結果"></a>驗證套用結果</h3><p>這時重整頁面就可以看到美美的主題了，而且程式與文章都是不相依於主題的，隨時都可以換另一套，或是對主題進行修改，不用怕文章壞掉，是不是很棒呢？<br><img src="sample.jpg"></p><h2 id="外掛"><a href="#外掛" class="headerlink" title="外掛"></a>外掛</h2><p>Hexo有豐富的<a href="https://hexo.io/plugins/" target="_blank" rel="noopener">外掛</a>資源，畢竟想要一個完美的網站就現階段來說還是不夠的，在這裡列出本站用到了哪一些外掛，但不會細寫出安裝步驟(我寫的也一定沒官方詳細<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/263a.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/263a.png?v8">☺</span>)，雖然有些外掛可能需要配合主題相應的微調，這部分就留給大家自己摸索啦<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f618.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f618.png?v8">😘</span></p><h3 id="RSS"><a href="#RSS" class="headerlink" title="RSS"></a>RSS</h3><p><a href="https://github.com/hexojs/hexo-generator-feed" target="_blank" rel="noopener">hexo-generator-feed</a><br>雖然自己沒用過RSS，但看大家都有，這我還不裝一個先！<br><img src="rss.jpg"></p><h3 id="Emoji"><a href="#Emoji" class="headerlink" title="Emoji"></a>Emoji</h3><p><a href="https://github.com/crimx/hexo-filter-github-emojis" target="_blank" rel="noopener">hexo-filter-github-emojis</a><br>Hexo的Markdown渲染器是不支援Emoji的，我找到好幾個外掛可以做這件事，最後挑了這款，只因為使用方式夠簡單！<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/bowtie.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/bowtie.png?v8"> </span><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8">😆</span><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f632.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f632.png?v8">😲</span><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f631.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f631.png?v8">😱</span><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/neckbeard.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/neckbeard.png?v8"> </span><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f60e.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f60e.png?v8">😎</span><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f607.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f607.png?v8">😇</span><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f918.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f918.png?v8">🤘</span></p><h3 id="Sitemap"><a href="#Sitemap" class="headerlink" title="Sitemap"></a>Sitemap</h3><p><a href="https://github.com/hexojs/hexo-generator-sitemap" target="_blank" rel="noopener">hexo-generator-sitemap</a><br>想讓更多人來部落格嗎？讓搜尋引擎更容易找出你的網站吧！記得再看看<code>robots.txt</code>喔。<br><img src="sitemap.jpg"></p><h3 id="Search"><a href="#Search" class="headerlink" title="Search"></a>Search</h3><p><a href="https://github.com/oncletom/hexo-algolia" target="_blank" rel="noopener">hexo-algolia</a><br>現在才知道還有<a href="https://www.algolia.com/" target="_blank" rel="noopener">Algolia</a>這種專門的搜尋服務，不用自己寫就可以在站內添加搜尋引擎，雖然免費的有使用量限制，但短期內也應該足夠使用了。<br><img src="algolia.jpg"></p><h2 id="佈署"><a href="#佈署" class="headerlink" title="佈署"></a>佈署</h2><p>終於到了最後一步，馬上就要將站台上線了，激動啊！官方列出了多個<a href="https://hexo.io/zh-tw/docs/deployment.html" target="_blank" rel="noopener">佈署範例</a>，這裡選用Git來做佈署。</p><h3 id="建立Git-Repository"><a href="#建立Git-Repository" class="headerlink" title="建立Git Repository"></a>建立Git Repository</h3><p><img src="gitpage.jpg"></p><h3 id="安裝佈署外掛"><a href="#安裝佈署外掛" class="headerlink" title="安裝佈署外掛"></a>安裝佈署外掛</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></tbody></table></figure><h3 id="修改佈署參數"><a href="#修改佈署參數" class="headerlink" title="修改佈署參數"></a>修改佈署參數</h3><p>打開我們的<code>_config.yml</code>，修改相關參數為Git Page。</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://feifacunzai.github.io</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/feifacunzai/feifacunzai.github.io</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></tbody></table></figure><h3 id="執行佈署指令"><a href="#執行佈署指令" class="headerlink" title="執行佈署指令"></a>執行佈署指令</h3><p>這裡我有使用gulp對靜態資源做優化與Algolia做搜尋，不需要的人只用輸入<code>hexo g</code>與<code>hexo d</code>就發佈完成了。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ hexo algolia</span><br><span class="line">$ hexo g</span><br><span class="line">$ gulp</span><br><span class="line">$ hexo d</span><br></pre></td></tr></tbody></table></figure><p>架設一個部落格是不是很簡單呢？大家一起來建自己的部落格吧<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8">😆</span><br><img src="deploy.jpg"></p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="http://chaxiaoniu.oschina.io/2017/07/05/Hexo+Oschina-build-blog/" target="_blank" rel="noopener">Hello World–Hexo + Oschina 搭建个人博客</a><br><a href="https://newdee.cf/posts/6d87f1ac/" target="_blank" rel="noopener">Hexo博客的优化</a><br><a href="https://segmentfault.com/a/1190000009544924" target="_blank" rel="noopener">hexo的next主题个性化配置教程</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一直有在定期追蹤幾個部落客，期間發現許多部落格的版型非常相似，並且都是架設在Github Page下，於是經過調查後，找到了這麼個玩意兒「&lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;」，看完許多資料後頓時覺得，這才是程式設計師該用的部落格啊！從站台、程式、到文章，都可以在自己的掌控之下，還有比這更Geek的嗎？以下紀錄搞玩過程。&lt;/p&gt;
    
    </summary>
    
    
      <category term="學習心得" scheme="https://feifacunzai.github.io/categories/%E5%AD%B8%E7%BF%92%E5%BF%83%E5%BE%97/"/>
    
    
      <category term="Hexo" scheme="https://feifacunzai.github.io/tags/Hexo/"/>
    
  </entry>
  
</feed>
